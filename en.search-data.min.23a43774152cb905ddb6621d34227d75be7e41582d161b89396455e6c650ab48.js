"use strict";(function(){const t={};t.doc={id:"id",field:["title","content"],store:["title","href","section"]};const e=FlexSearch.create("balance",t);window.bookSearchIndex=e,e.add({id:0,href:"/contact/",title:"Contacts",section:"Macaroni OS",content:`We will happy to receive your feedback about the software available, what is missing, and your help in improving the distro.
Discord You can reach us in our Discord Server and we are also in the Funtoo Discord Server.
Issues Tracker Our issue tracker is over our Github main repository.
If you find a bug or do you have some new feature request please open an issue here.
Support us with hardware Building packages requires resources and hardware. If you want to donate a node to attach to our Mottainai Cluster please contact me directly through our Discord Server.
`}),e.add({id:1,href:"/faq/",title:"Frequently Asked Questions",section:"Macaroni OS",content:`1. How update Macaroni Repositories URLs? In the last period due to the changes in the new domain and the stabilization of the Macaroni infra there are been a lot of changes in the repository URLs. Working with donated resources and/or free resources has the consequence that the changes could happen.
So, I will describe the better way to upgrade safe our repositories.
a) leave only the geaaru-repo-index repository enabled. This means to call luet repo disable for all others repositories
$# luet repo disable macaroni-commons mottainai-stable macaroni-funtoo $# luet repo list --enabled geaaru-repo-index Macaroni OS Repository Index Revision 4 - 2023-02-25 10:32:39 +0000 -00 Priority 1 - Type http b) At this point, it\u0026rsquo;s possible update the repository and get the new urls:
$# luet repo update üè† Repository: geaaru-repo-index Revision: 4 - 2023-02-25 10:32:39 +0000 -00 $# luet upgrade The upgrade creates the files /etc/luet/repos.conf.d/._cfg_\u0026lt;repo\u0026gt;.yml that could be merged with the command etc-update (in the old system) or with the command macaronictl etc-update in the more updated systems.
After the upgrade and the merge of the new configs the system is ready for the updates: luet repo update and luet upgrade.
It\u0026rsquo;s possible check the repositories urls with:
# luet repo list --urls --enabled geaaru-repo-index Geaaru Repository index Revision 4 - 2023-02-25 10:32:39 +0000 UTC Priority 1 - Type http Urls: * https://cdn.macaronios.org/mottainai/geaaru-repo-index macaroni-commons-dev Macaroni OS Commons Development Repository Revision 129 - 2023-03-03 22:16:31 +0000 UTC Priority 10 - Type http Urls: * https://dev.macaronios.org/macaroni-commons-dev/ macaroni-funtoo-systemd-dev Macaroni OS Funtoo Eagle Develop Repository Revision 452 - 2023-02-26 11:14:32 +0000 UTC Priority 2 - Type http Urls: * https://images.macaronios.org/macaroni-funtoo-systemd-dev/ mottainai-dev Mottainai Development Repository Revision 72 - 2023-02-25 23:47:52 +0000 UTC Priority 10 - Type http Urls: * https://dev.macaronios.org/mottainai-dev/ mottainai-stable Mottainai official Repository Revision 72 - 2023-02-25 23:47:52 +0000 UTC Priority 30 - Type http Urls: * https://dl.macaronios.org/repos/mottainai/ * https://cdn2.macaronios.org/repos/mottainai/ * https://macaronios.mirror.garr.it/repos/mottainai/ 2. What to do after the upgrade of the luet binary? I leave this point in the FAQ because I began to rewrite the Macaroni PMS and until I will rewrite the luet-build binary the luet repo update command executes some post-fetch operations on the downloaded tree to speed up the research, and to have the files used by the new solver available in the luet version 0.33.0 and followed.
So, after the upgrade of luet there are two things that is better to do:
$# luet database reindex This will rebuild the Bolt Database indexes and
$# luet repo update --force that download and executes again the post-fetch hooks in the downloaded tree.
One of the errors reported by the users when is not executed a full fetch of the Macaroni repositories after the upgrade is this:
ü§î Computing upgrade, please hang tight... üí§ Error: Package net-libs-4/webkit not found on map 3. Why luet search doesn\u0026rsquo;t return packages? Excluding the search of the packages installed, i mean with the --installed option, the luet search command works only when the enabled repositories are been synced.
It\u0026rsquo;s just needed to download one time the repositories tree and then all works fine.
$# luet repo update ... $# luet s macaronictl app-admin/macaronictl-0.6.2 app-admin/macaronictl-thin-0.6.2 # luet s portage-converter macaroni/luet-portage-converter-0.11.2 `}),e.add({id:2,href:"/blog/phoenix-23.05/",title:"Macaroni OS Phoenix 23.05 is out!",section:"Blog",content:`We are happy to announce the new release Phoenix 23.05 that contains the first significant change needed to migrate the Phoenix tree from the Funtoo release 1.4-prime to the Next release, an activity that will be completed for the subsequent releases. In particular, with this release is dropped the support of Python 2.7 in EOL for a lot of months. The package dev-lang-2.7/python is yet available because a lot of Funtoo packages depend on it for compilation but it\u0026rsquo;s discouraged the use.
Finally, we have started the documentation that now describes step-by-step how to install Macaroni OS under a new system and choose if to use a fully encrypted filesystem (only the boot partition will be clear but with GRUB asking for a password) or with a specific partition encrypted, for example, the /home. See Documentation Page for the detail and the Story to know how Macaroni OS is born. It\u0026rsquo;s been described how to use subsets to customize the installation of the selected packages and primarily we have tried to describe the main functions needed for a user. We will integrate the build process used to create user repositories in the next months. Stay tuned!
To increase the creativity of our users I think that is important to permit them to choose between different Desktop Environments, this is the reason that we have added support to LXQT v1.3.0 and i3 v4.22 thanks to their availability on Funtoo tree. The LXQT and i3 DE will be available yet as ISOs ready for the installation.
The new ISOs will be available in two/three days, just the time for the sync to the GARR mirror and for the CDN propagation.
What\u0026rsquo;s new This new release has some interesting updates:
* LXD 5.12 * Libreoffice 7.5.2.2 * Firefox 112.0.2 * Brave 1.50.125 * Google Chrome 112.0.5615.165 * Grafana 9.5.1 and Prometheus 2.43.0 * Blender 3.5.1 * Inkscape 1.2.2 * Golang 1.20.3 * Virtualbox 7.0.8.156879 See the complete changelog on Github.
whip-catalog get power! To improve the system check the following new hooks are been reviewed and/or added:
linking.check: The hook is been reviewed to correctly validate the libraries and/or binaries using third-party libraries under /opt directory.
vbox.vbox_setup: After the upgrade of Virtualbox I saw in some installation wrong permissions after the upgrade. This hook now restore the right permission and suid.
$\u0026gt; whip h vbox.vbox_setup Ensure owner on vbox binary... Ensure execution bit on vbox binary... Ensure suid to vbox binary... [vbox.vbox_setup] Completed correctly. New repositories names To help users identify the repositories related to all available releases we have renamed our repositories as described here following the releases codename (phoenix, eagle, terragon).
Due to the logic implemented on luet about config protection after the luet upgrade is needed to remove manually the old repository files:
$\u0026gt; # as root $\u0026gt; /root # cd /etc/luet/repos.conf.d/ $\u0026gt; /etc/luet/repos.conf.d # rm macaroni-funtoo.yml $\u0026gt; /etc/luet/repos.conf.d # ls -l total 12 -rw-r--r-- 1 root root 307 Feb 20 09:12 macaroni-commons.yml -rw-r--r-- 1 root root 304 May 15 18:14 macaroni-phoenix.yml -rw-r--r-- 1 root root 280 Apr 6 21:04 mottainai-stable.yml After this operation could be better cleanup orphans tree from the system and resync the tree:
$\u0026gt; luet cleanup --purge-repos $\u0026gt; luet repo update New Docker/LXD images names Following the same reason used for the repositories also our Docker images will be renamed as described here and also the LXD images will be renamed in the next days.
What next? Hereinafter, our hot points for the next releases:
Working on monthly releases of Terragon and Eagle
Add documentation about Macaroni tools (whip, macaronictl, luet-portage-converter, etc.) and about Config Protect feature.
Waiting for two/three months for an update it\u0026rsquo;s not always a good idea. For example, Discord apps become unusable. To resolve this issue we want to create a macaroni-security repository where updates more frequently some packages: browsers, security patches, etc.
Working on rewrite of luet-build binary
Starts migration of Phoenix release to Funtoo Next branch.
Following the idea of the macaroni-security repository we are thinking of a macaroni-community repository where users could create their packages to share and also a macaroni-games where share packages of games and emulators.
In July, we will in holiday so, probably the next release of Phoenix will be available in August.
A PMS GUI incoming! I\u0026rsquo;m very happy that people begin to use Macaroni OS and I want to thank a special user Marcello Basso aka nomorelogic who developing a GUI for luet, available in our repository with the name pageant that is been written with Lazarus and Free Pascal and that could be used to search packages, show files owned by packages and soon with others good features.
The pageant is yet in high development phase and is available as version 0.0.4_alpha.
Hereinafter, the window where to see the detail of a package and his files.
We waiting for you We waiting for you in our Discord Server.
Thanks Many thanks to all Funtoo devs that are the sap of all this and to all people that helps us with testing and donations.
Support Us Any user that wants to support our work for Macaroni could do this through the Github Sponsor.
`}),e.add({id:3,href:"/blog/phoenix-23.03.02/",title:"Macaroni OS Phoenix 23.03.02 is out!",section:"Blog",content:`After receiving the first notifications we caught an issue in our last ISOs related to the split of the Grub package done to divide the grub-emu binary. It\u0026rsquo;s been removed for error the Grub\u0026rsquo;s patches related to ext4 1.47.0 and of Macaroni initramfs naming.
Without the patch the default installation fails on setup grub because it\u0026rsquo;s used ext4 and an unknown filesystem error is generated by grub.
The new ISOs will be available in two days.
Unlucky, to build the ISOs with the stable repositories at the moment we need to wait that the stable repositories to be synced to our CDN and main mirror.
We have planned to integrate the repetitors feature to luet that will permit to reduce the outgoing traffic when it\u0026rsquo;s used Macaroni for CD/CI and for us, to test stable repository before sync it to master.
All ISOs will be with ZRAM enabled by default.
Sorry for this issue.
Behind this fix, I fixed the URL reported in the Calamares installer that was yet with the old domain macaroni.funtoo.org.
See previous post for the details about changes.
We waiting for you We waiting for you in our Discord Server.
Thanks Many thanks to all Funtoo devs that are the sap of all this and to all people that helps us with testing and donations.
Support Us Any user that wants to support our work for Macaroni could do this through the Github Sponsor.
`}),e.add({id:4,href:"/blog/phoenix-23.03.01/",title:"Macaroni OS Phoenix 23.03.01 is out!",section:"Blog",content:`While we have worked on preparing the new ISOs for the release 23.03 we have figured out that was better to bump a new release with the changes of the Calamares plugin to migrate our ISOs to kernel 6.1. In particular, the ISOs for Desktops have now the kernel 6.1.18 with built-in integration with new Realtek wifi cards. Unluckily not yet the cards 8852b e 8852be that will be available on branch 6.2. We will try to support it on kernel 6.1 with an external driver in the next release.
The Server ISOs maintain the kernel 5.10 LTS.
This is the reason for this delay and this micro-release.
We share in addition, that testing the Firefox release 109.0.1 that is been released on release 23.01 has figured out that there are some issues with NVIDIA cards. The Firefox windows were stalled often and only disabling hardware acceleration fixed this issue. So, please, if users have some similar experience with release 111.0 open an issue.
The new Download page We are very happy to share finally the new Download page where retrieve the new ISOs is now available. Inside the Download page we have tried to use a labels view that we hope will help users to choose the right ISOs for their requirements. Any feedback about this will help, thanks.
macaronictl gets again power! After receive tons of requests about integrate a switch command to upgrade the kernel release, we are happy to share that the time is arrived\u0026hellip;
The macaronictl release 0.8.0 contains these new commands and improvements:
macaronictl kernel switch #\u0026gt; macaronictl k switch macaroni@6.1 Found kernel candidate kernel-6.1/macaroni-full-6.1.12... Modules extra to install: - kernel-6.1/lkrg-0.9.6 In summary this command search for all extra kernel modules installed in the system and it tries to install the selected kernel with all extra modules installed.
macaronictl kernel modules When the local repositories are synced this command permits to retrieve all extra kernel modules availables in all kernel branches:
$ macaronictl kernel modules | PACKAGE | PACKAGE VERSION | KERNEL BRANCH | KERNEL VERSION | REPOSITORY | |----------------------------------------|-----------------|---------------|----------------|-----------------| | kernel-5.10/lkrg | 0.9.6+1 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/nvidia-kernel-modules | 525.85.05+3 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/rtw89 | 0.20220824+15 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/virtualbox-guest-additions | 7.0.6.155176+3 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/virtualbox-modules | 7.0.6.155176+2 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/zfs-kmod | 2.1.9+2 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.15/nvidia-kernel-modules | 525.85.05+2 | 5.15 | 5.15.102 | macaroni-funtoo | | kernel-5.15/rtw89 | 0.20220824+11 | 5.15 | 5.15.102 | macaroni-funtoo | | kernel-5.15/virtualbox-modules | 7.0.6.155176+2 | 5.15 | 5.15.102 | macaroni-funtoo | | kernel-5.4/nvidia-kernel-modules | 525.85.05+2 | 5.4 | 5.4.236 | macaroni-funtoo | | kernel-5.4/rtw89 | 0.20220824+11 | 5.4 | 5.4.236 | macaroni-funtoo | | kernel-5.4/virtualbox-modules | 7.0.6.155176+2 | 5.4 | 5.4.236 | macaroni-funtoo | | kernel-5.4/zfs-kmod | 2.1.9+2 | 5.4 | 5.4.236 | macaroni-funtoo | | kernel-6.1/lkrg | 0.9.6+2 | 6.1 | 6.1.18 | macaroni-funtoo | | kernel-6.1/nvidia-kernel-modules | 525.85.05+2 | 6.1 | 6.1.18 | macaroni-funtoo | | kernel-6.1/virtualbox-guest-additions | 7.0.6.155176+2 | 6.1 | 6.1.18 | macaroni-funtoo | | kernel-6.1/virtualbox-modules | 7.0.6.155176+2 | 6.1 | 6.1.18 | macaroni-funtoo | | kernel-6.1/zfs-kmod | 2.1.9+2 | 6.1 | 6.1.18 | macaroni-funtoo | or for a specific kernel branch:
$ macaronictl kernel modules -b 5.10 | PACKAGE | PACKAGE VERSION | KERNEL BRANCH | KERNEL VERSION | REPOSITORY | |----------------------------------------|-----------------|---------------|----------------|-----------------| | kernel-5.10/lkrg | 0.9.6+1 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/nvidia-kernel-modules | 525.85.05+3 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/rtw89 | 0.20220824+15 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/virtualbox-guest-additions | 7.0.6.155176+3 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/virtualbox-modules | 7.0.6.155176+2 | 5.10 | 5.10.174 | macaroni-funtoo | | kernel-5.10/zfs-kmod | 2.1.9+2 | 5.10 | 5.10.174 | macaroni-funtoo | macaronictl kernel available Running this command with root privileged now permits us to see the installed kernel in bold.
Whip power! With little steps, we improve our knife swiss that is used to post-install hooks and for validation. In this release, we have added new important hooks to the whip catalog:
linking.check: This hook permit to validation of existing installation and search for libraries or binary with a broken link. So, if you find some issue with running this in a clean installation, please, open an issue.
For example, on Eagle release I found this issue that permits to be fixed very fast until the fix will be available on the repository:
$\u0026gt; whip h linking.check Checking directory /usr/lib64... Checking directory /usr/lib... Checking directory /usr/bin... /usr/bin/rsync Checking directory /bin... Checking directory /usr/sbin... Checking directory /usr/libexec... [linking.check] Completed correctly. The rsync binary seems broken:
$\u0026gt; ldd /usr/bin/rsync linux-vdso.so.1 (0x00007ffcb294f000) libacl.so.1 =\u0026gt; /lib64/libacl.so.1 (0x00007f9571d29000) libpopt.so.0 =\u0026gt; not found libcrypto.so.1.1 =\u0026gt; /usr/lib64/libcrypto.so.1.1 (0x00007f9571a00000) libc.so.6 =\u0026gt; /lib64/libc.so.6 (0x00007f9571846000) libz.so.1 =\u0026gt; /lib64/libz.so.1 (0x00007f9571d0f000) libdl.so.2 =\u0026gt; /lib64/libdl.so.2 (0x00007f9571d0a000) libpthread.so.0 =\u0026gt; /lib64/libpthread.so.0 (0x00007f9571ce9000) /lib64/ld-linux-x86-64.so.2 (0x00007f9571dd6000) and then it\u0026rsquo;s very easy find the missing RDEPEND that must be fixed in the Macaroni repository:
$\u0026gt; luet q belongs libpopt.so.0 dev-libs/popt-1.16 In this case the library popt is missing on runtime_deps and you need to install it directly:
$\u0026gt; luet i dev-libs/popt üöÄ Luet 0.35.1-geaaru-g2d63605bff9ddee0171f4769c4e956317b910b56 2023-03-17 03:07:06 UTC - go1.20.2 üè† Repository: geaaru-repo-index Revision: 5 - 2023-03-18 10:12:28 +0000 UTC üè† Repository: macaroni-commons-testing Revision: 137 - 2023-03-19 11:49:39 +0000 UTC üè† Repository: macaroni-funtoo-systemd-dev Revision: 451 - 2023-02-13 09:25:49 +0000 UTC üè† Repository: mottainai-testing Revision: 80 - 2023-03-17 21:34:59 +0000 UTC üß† Solving install tree... üç¶ [ 1 of 1] [N] dev-libs/popt::macaroni-funtoo-systemd-dev - 1.16 üíÇ Checking for file conflicts... ‚úîÔ∏è No conflicts found (executed in 285 ¬µs). Do you want to continue with this operation? [y/N]: y üöö Downloading 1 packages... üì¶ [ 1 of 1] dev-libs/popt::macaroni-funtoo-systemd-dev - 1.16 # downloaded ‚úî üß† Sorting 1 packages operations... üçª Executing 1 packages operations... üç∞ [ 1 of 1] dev-libs/popt::macaroni-funtoo-systemd-dev - 1.16 # installed ‚úî And then no more issues available:
$\u0026gt; whip h linking.check Checking directory /usr/lib64... Checking directory /usr/lib... Checking directory /usr/bin... Checking directory /bin... Checking directory /usr/sbin... Checking directory /usr/libexec... [linking.check] Completed correctly. postgresql.postgres_setup: this hook permit to setup Postgres SQL setup with the SLOT selected. It\u0026rsquo;s available on lxd-compose-galaxy a project that set up a standalone Postgresql server based on configuration variables that will be described very soon on the LXD Compose website.
The whip-catalog is a YAML files catalog with bash/sh commands. If you find something missing or you have some idea about new hooks, please open a PR.
What next? Well, few is changed after the release 23.03 so, the open points are the same but we will push forward with a major priority the documentation. I hope that we will cover a good documentation part for the next release. Stay tuned!
We waiting for you We waiting for you in our Discord Server.
Thanks Many thanks to all Funtoo devs that are the sap of all this and to all people that helps us with testing and donations.
Support Us Any user that wants to support our work for Macaroni could do this through the Github Sponsor.
`}),e.add({id:5,href:"/blog/phoenix-23.03/",title:"Macaroni OS Phoenix 23.03 is out!",section:"Blog",content:`Finally, after two months of hard work, the release Phoenix 23.03 is out and is the first Desktop release under the new macaronios.org domain.
In these two months, we had to follow infrastructure issues (broken hard disks) and create the new Macaroni network. This is one of the reasons we have skipped the release of February.
We want to thank again the GARR consortium that is now our primary mirror under our CDN and this will permit in the next weeks to expose again the ISOs download page and our LXD images.
This release doesn\u0026rsquo;t expose extraordinary packages or upgrades but is a big milestone for us because a lot of our work is under the hood and will be better understood by the users in the next months when another big target will be reached: the creation of the Macaroni documentation.
A big milestone The first major target reached is the first big rewrite of the Macaroni PMS tool luet that now:
has a new solver completely rewritten that now respects repositories priorities, it\u0026rsquo;s 100x fast and consumes few memory. The only limit at the moment is that until the luet-build binary will be rewritten the repository metadata will be yet with a big YAML file that must be exploded at least one time when is called the luet repo update command but this will be fixed in the near future. This is been an important result to begin ARM integration
the integration of the new solver has permitted the creation of the mask packages feature. It works in a similar way to Funtoo portage and will be described in detail in the Macaroni documentation in the near future. This is an important result because will permit to supply multiple versions of the same package and using the mask feature to hide a specific version to a target rootfs. You can think of a package like NVIDIA drivers where legacy cards need to have a specific version, or again if a user wants to create their packages and hide the Macaroni version, etc.
the provides support is been reviewed to permit a good means to manage correctly packages that are replaced. The correct way to use provide is to define a specific version in the provides and not a selector. For example:
provides: - category: cat name: foo version: 0.1.0 the install command now doesn\u0026rsquo;t try to upgrade automatically the system; it just tries to resolve the dependencies and the packages selected and install them. This will permit to install of specific packages also when there are upgrades available.
the luet now permits to select of packages only by name. I really love this feature, because permits the reduction of the text written and speeds up the installation and research. For example:
$\u0026gt; luet i app-emulation/lxd-compose becomes:
$\u0026gt; luet i lxd-compose luet repo list command has now a new look and option:
$\u0026gt; luet repo list --urls geaaru-repo-index Geaaru Repository index Revision 4 - 2023-02-25 10:32:39 +0000 UTC Priority 1 - Type http Urls: * https://raw.githubusercontent.com/geaaru/repo-index/gh-pages macaroni-commons-dev Macaroni OS Commons Development Repository Revision 131 - 2023-03-08 22:17:57 +0000 UTC Priority 10 - Type http Urls: * https://dev.macaronios.org/macaroni-commons-dev/ macaroni-commons-testing Macaroni OS Commons Testing Repository Priority 20 - Type http Urls: * https://dl.macaronios.org/repos/macaroni-commons-testing/ * https://cdn2.macaronios.org/repos/macaroni-commons-testing/ * https://macaronios.mirror.garr.it/repos/macaroni-commons-testing/ the original solvers are no more available and will be dropped from the code when also the luet-build binary will be rewritten.
The upgrades/installs output is now more clear with the cons that for now the download process is not parallel. This fixes the progress bar issues. We are working on following an output similar to portage that will be available in the next release 0.35.0.
We have begun to work on commands that permit configuring subsets but they are to be complete.
it\u0026rsquo;s now available a new command luet query orphans that permits retrieving all packages no more available in the enabled repository.
In general, now you can control with luet every action and package of your system. If there are issues in the new solver you aren\u0026rsquo;t blocked, you can manually fix issues with hidden (and for expert users) commands luet miner that will be described in the documentation.
This is what is been said from an user on testing the new luet binary:
Feels like you took a Ford Fiesta and turned it into a Ferrari
Really, thanks for this comment that will get me more power to go ahead.
A lot of new improvements and features are in our backlog.
An important thing that is not yet available is the possibility to downgrade the packages if I user wants to convert a rootfs updated with a testing repository to a stable repository. But is in our plan to add this feature soon.
ATTENTION: Due to all these changes, my suggestion is to upgrade this time the luet binary manually with a download from the site and the follow what is been described in the new FAQ section of the website.
$\u0026gt; sudo wget -O /usr/bin/luet https://github.com/geaaru/luet/releases/download/v0.34.2-geaaru/luet-v0.34.2-geaaru-Linux-x86_64 $\u0026gt; sudo chmod a+x /usr/bin/luet We will improve this operation in the near future.
macaronictl gets power! The luet rewritten is not the only new improvement, the management CLI of Macaroni OS, macaronictl gets more power:
macaronictl env-update is been completely written in Golang following the same Funtoo/Gentoo logic. This permits to have Macaroni OS systems to the need to install the sys-apps/portage package. This migration is not yet completely completed but will be so in the next release.
macaronictl tool has a new etc-update command written in Golang that uses the same /etc/etc-update.conf config and it implements a similar logic to the Portage etc-update command.
macaronictl tool has a new kernel availables command that permit to retrieve all kernel available from the enabled repositories and supply some metadata:
$\u0026gt; macaronictl kernel availables --lts | KERNEL | KERNEL VERSION | PACKAGE VERSION | EOL | LTS | RELEASED | TYPE | |----------|----------------|-----------------|-----------|------|------------|---------| | macaroni | 4.14.305 | 4.14.305 | Jan, 2024 | true | 2017-11-12 | vanilla | | macaroni | 5.10.168 | 5.10.168 | Dec, 2026 | true | 2020-12-13 | vanilla | | macaroni | 5.15.94 | 5.15.94 | Oct, 2026 | true | 2021-10-31 | vanilla | | macaroni | 5.4.231 | 5.4.231 | Dec, 2025 | true | 2019-11-24 | vanilla | | macaroni | 6.1.12 | 6.1.12 | Dec, 2026 | true | 2022-12-11 | vanilla | This will help with the feature that will be available in the next future to switch between kernels.
Funtoo integration (experimental) In the middle of all the new implementations we have released a new release of the luet-portage-converter tool that is used normally to generate automatically updates from our luet specs.
I hope that this will be a lovely experience for the Funtoo users.
I will leave users with a bit of suspense until I will write the documentation in the next weeks but the new luet-portage-converter sync command will permits:
convert a Funtoo system to a Macaroni OS and get updates from Macaroni or restore the broken system.
sync with the Macaroni PMS the packages installed with emerge to the luet database and/or sync packages previously installed with luet and then upgraded with emerge.
Obviously, to use these features is needed a Macaroni OS with subsets portage and devel enabled.
ATTENTION: This new command is pretty experimental and must be used carefour.
Domain migration again I\u0026rsquo;m sorry but after the integration of the Consortium GARR I reviewed the stable domains with a CDN chain. I added in the FAQ section of the website some tips about easily upgrading the repositories. I hope that things will be more stable now but using free services has some cons.
What\u0026rsquo;s new This new release has some interesting updates:
LXD 5.11 and LXC 5.0.2
Libreoffice 7.5.0.3
Firefox 1.109.0.1
Brave 1.48.158
Grafana 9.3.6 and Prometheus 2.42.0
Blender 3.4.1
ZFS 2.1.9
KDE Framework 5.85.5 and KDE Plasma 5.22.5
Openshot video editing tool updated to release 2.6.1
Cinelerra is been dropped. The website has tons of forks without a tag and it seems hard to maintain.
Grub 2.04 with patch related to the use of new e2fsprogs v.1.47.0. See debian issue.
Open VMtools 12.1.5
All kernels modules are been renamed following the naming convention: kernel-\u0026lt;kernel-branch\u0026gt; as category. This will help searching and macaronictl integration. Always related to the kernel, the string LTS is been removed from kernel packages. The LTS information is now available over the package annotations.
See the release page for the detail of all updates.
What next? Hereinafter, our hot points for the next releases:
Drop support to Python 2.7 from Phoenix and leave Python 3.7 only. We will upgrade to Python 3.9 later.
Continue to work begun on writing documentation and FAQ for users.
Begin the rewrite of luet-build binary and improve look\u0026amp;feel of the luet output.
Add the new ISOs webpage and prepare the release of the ISO 23.03. We need to wait for the sync of the GARR mirror and the propagation.
Add new features to luet-portage-converter to manage multiple versions of the same package.
Add new features to macaronictl tool
Add Macaroni OS LXD images to images.linuxcontainers.org.
We waiting for you We waiting for you in our Discord Server.
Thanks Many thanks to all Funtoo devs that are the sap of all this and to all people that helps us with testing and donations.
Support Us Any user that wants to support our work for Macaroni could do this through the Github Sponsor.
`}),e.add({id:6,href:"/blog/new-domain/",title:"macaronios.org is here!",section:"Blog",content:`After 1 year of incubation under the Funtoo Foundation, the Macaroni OS has now its domain macaronios.org and its infrastructure. Really, thanks to the Funtoo Foundation and Daniel Robbins for its support that helped to Macaroni OS to be here today.
From the infrastructure aspect nothing is changed, all compilation tasks are executed over MottainaiCI cluster but with less resource power for now.
We hope that the community will help us to maintain the infrastructure costs with donations over our Github Sponsor or with VMs donations for compilation.
New Github Organization With the review of the Macaroni OS domain, it\u0026rsquo;s been created a new and independent GitHub organization macaroni-os and migrated all Git repositories there.
Domain migration and users impacts The old domain *.macaroni.funtoo.org will expire soon, the existing users that are yet with the repository geaaru-repo-index configured with the Github URL will receive automatically the upgrade of the repository/* packages.
$# luet repo update ‚ÑπÔ∏è Repository: geaaru-repo-index Priority: 1 Type: http Revision: 2 ‚ÑπÔ∏è Repository: macaroni-commons Priority: 2 Type: http Revision: 117 ‚ÑπÔ∏è Repository: macaroni-funtoo Priority: 2 Type: http Revision: 620 ‚ÑπÔ∏è Repository: mottainai-stable Priority: 1 Type: http Revision: 55 $# luet upgrade ‚ÑπÔ∏è Repository: geaaru-repo-index Priority: 1 Type: http Revision: 2 ‚ÑπÔ∏è Repository: macaroni-commons Priority: 2 Type: http Revision: 117 ‚ÑπÔ∏è Repository: macaroni-funtoo Priority: 2 Type: http Revision: 620 ‚ÑπÔ∏è Repository: mottainai-stable Priority: 1 Type: http Revision: 55 ü§î Computing upgrade, please hang tight... üí§ üåè Using solver implementation solverv2 . üåé Completed compute upgrade analysis in 23323842 ¬µs. +-------------------------------------+-------------+-------------+-------------------+---------+ | PACKAGE | NEW VERSION | OLD VERSION | REPOSITORY | LICENSE | +-------------------------------------+-------------+-------------+-------------------+---------+ | repository/geaaru-repo-index | 20230118 | 20220819 | geaaru-repo-index | | | repository/macaroni-commons | 20230118 | 20211210 | geaaru-repo-index | | | repository/macaroni-funtoo | 20230118 | 20211210 | geaaru-repo-index | | | repository/mottainai-stable | 20230118 | 20220318 | geaaru-repo-index | | +-------------------------------------+-------------+-------------+-------------------+---------+ By going forward, you are also accepting the licenses of the packages that you are going to install in your system. Do you want to continue with this operation? [y/N]: Instead, the users with the new configuration could receive the new repositories address on change the content of the the /etc/luet/luet.yaml (if the geaaru-repo-index is configured inline and not through the repository config file or editing the file /etc/luet/repos.conf.d/geaaru-repo-index.yml with this content:
- name: \u0026#34;geaaru-repo-index\u0026#34; description: \u0026#34;Geaaru Repository index\u0026#34; type: \u0026#34;http\u0026#34; enable: true cached: true priority: 1 urls: - \u0026#34;https://cdn.macaronios.org/mottainai/geaaru-repo-index\u0026#34; - \u0026#34;https://raw.githubusercontent.com/geaaru/repo-index/gh-pages\u0026#34; After that to get the new updates just run:
$# macaronictl etc-update The map with the changes of the URL is available here.
What next? Hereinafter, our hot points for the near future:
We working to complete the review of the luet installer and his algorithms to reduce the memory usage, rewrite the solver and introduce the packages mask concept. This will permit us to begin on working a Macaroni release for ARM (Banana PI, Raspberry).
The terragon release will drop the support to Python 3.7 to leave active only Python 3.9.
Create a full and clear documentation of all Macaroni features.
When the first two points will be reached will start the integration of macaroni-ffs project related to the Funtoo FFS technology and permit users to have easy the toolchains for compilation
A lot of things are in our plan, stay tuned!
Additional thanks On setup of the new infrastructure, I want to thank the all people who helped me in setting up the Cloudflare services in about two days. Really, thanks.
`}),e.add({id:7,href:"/iso/",title:"Macaroni Download",section:"Macaroni OS",content:` ISO Following the idea to share the right ISO for the right user we want to supply some indications that help users on choose the ISO for their needs.
We use these labels in the hereinafter ISOs description with these mean:
Label Description newbie Ideal for new users and/or not developers that don't need a compilator. student Ideal for students that searching for school stuff. developer Ideal for developers that need a compilator and includes. tester Ideal for users that want help Macaroni with testing. funtoo Ideal for Funtoo/Gentoo users want to have Portage metadata on Macaroni. services Ideal for System Engineers, Developers users who want to use Macaroni to set up services. nerd-herd Not for weak of heart. Need good preparation in computer science or an advance experience. Inspired by the Chuck Series. Choice your ISO At the moment, all our ISOs are based on Phoenix release. If you want to install Macaroni OS on your computer and/or laptop you need to use the Release ISOs. The weekly ISO are for testing.
All of the ISOs use Calamares as Installer.
The password of the macaroni user is macaroni.
Name Labels Description Macaroni Funtoo Phoenix Gnome newbie student A minimal Gnome Desktop ISO to install Macaroni Gnome with Calamares or to recovery an exiting system. Macaroni Funtoo Phoenix Gnome Live newbie student Ready to use ISO with different tools for Office/School/Graphic that could be installed too. Macaroni Funtoo Phoenix XFCE newbie student A XFCE Desktop ISO to install Macaroni XFCE with Calamares. Ideal for XFCE fans and for old computers. Macaroni Funtoo Phoenix LXQt newbie student A LXQt Desktop ISO to install Macaroni LXQt DE with Calamares. Ideal for LXQt fans and for old computers. Macaroni Funtoo Phoenix i3 nerd-herd A LXQt Desktop ISO to install Macaroni LXQt DE with Calamares. Ideal for LXQt fans and for old computers. Macaroni Funtoo Phoenix Gnome Devel funtoo developer student nerd-herd A minimal Gnome Desktop ISO where are enabled the subsets portage and devel. Macaroni Funtoo Phoenix XFCE Devel funtoo developer student nerd-herd A XFCE Desktop ISO to install Macaroni XFCE with Calamares where are enabled the subsets portage and devel. Ideal for XFCE fans and for old computers. Macaroni Funtoo Phoenix Gnome Testing Live tester Macaroni Gnome Live ISO with testing and/or develop repositories. Macaroni Funtoo Phoenix XFCE Testing Live tester Macaroni XFCE Live ISO with testing and/or develop repositories. Macaroni Funtoo Phoenix LXQt Testing tester A LXQt Desktop ISO with testing and/or develop repositories. Macaroni Funtoo Phoenix i3 Testing tester nerd-herd A i3 Desktop ISO with testing and/or develop repositories. Macaroni Funtoo Phoenix Server services Macaroni Server release with a minimal number of packages and with LXD. Normally used in server or VM. Macaroni Funtoo Phoenix Server Devel services funtoo developer nerd-herd Macaroni Server release with the subsets \`portage\` and \`devel\` enabled. Installing needed packages could be used Portage. Our last release is 23.05 and it uses kernel 5.10.179 for Server ISOs and 6.1.28 for the others.
`}),e.add({id:8,href:"/partners/garr/",title:"Consortium GARR",section:"Partners",content:`GARR is the ultra-broadband network dedicated to the Italian research and education community. Its main objective is to provide high-performance connectivity and to develop innovative services for the daily activities of researchers, professors and students as well as for international collaboration.
GARR network is designed and managed by Consortium GARR, a non-profit association founded under the auspices of the Ministry of Education, University and Research. The members are¬†CNR,¬†ENEA,¬†INAF, INFN, INGV and¬†CRUI Foundation, representing all Italian universities.
The Consortium GARR supply our primary mirror at macaronios.mirror.garr.it.
Thank you very much for your support.
`}),e.add({id:9,href:"/docs/getting-started/",title:"Getting Started",section:"Macaroni OS",content:` Getting Started # Install Macaroni ISO # Choice the right ISO for your requirements from our Download page.
1.Validate downloaded ISO # After the you have downloaded the ISOs file, I suggest to verify the quality of the download throw our SHA256 hash:
$ sha256sum Macaroni-Funtoo-Phoenix-Gnome-23.03.02.iso 8637d8c6ba72f8694aabd631f038473acaadd0fbb8fc9fa7cec7bb0d495f1f54 Macaroni-Funtoo-Phoenix-Gnome-23.03.02.iso $ cat Macaroni-Funtoo-Phoenix-Gnome-23.03.02.iso.sha256 8637d8c6ba72f8694aabd631f038473acaadd0fbb8fc9fa7cec7bb0d495f1f54 If the download is correct the hash will be the same.
Until the issue #7 will be fixed you need to compare the sha256 manually.
2.Flash your USB drive # To write an ISO there are different tools and ways. My suggestion is to use the wonderful tool Balena Etcher that validate the written bytes before share the result.
NOTE: At the moment the ventoy USB Solution is not supported.
3.Check your BIOS # At the moment, the Macaroni ISOs don\u0026rsquo;t support an EFI-signed bootstrap. So, before bootstrapping your USB drive just check and disable EFI security check.
Hereinafter is an example of how setup the right options:
Normally, based on device there are different way to enter on BIOS, through F10, Canc, F2. You need to check your device manual.
4.Boot the ISO # When the Menu is visible could be possible customize boot options with E keyboard button. After push to E keyboard button compares in the foot the default command line options where you can add every kernel options.
Disable Nouveau driver # By default we prefer using nouveau driver for the NVIDIA cards on bootstrap our live ISOs. But it\u0026rsquo;s possible that some new cards could be not be yet supported.
To force the loading of the NVIDIA kernel module you can add this option:
modprobe.blacklist=nouveau Enter in the ISO bootstrap shell # If there are issues on bootstrap correctly the Macaroni ISOs you can enter in the initrd shell and to recover informations about your system and help us to check what happens.
To enter in the shell before the probing of the ISO squashfs to debug the probing phase and the switch root command you need to add shell=1 as option.
ISOLinux bootstrap # The described option at the moment are not available in the ISOLinux menu visible hereinafter:
The ISOLinux menu normally is available for not-EFI systems.
5. Start Installer # All our ISOs are configured with Network Manager by default which is better integrated with the Calamares installer. You are free to disable and change it later when the system is installed.
The default user of Macaroni ISO is macaroni with password macaroni.
Server ISO # The Server ISO automatically starts an X server with Calamares without a Desktop Environment.
The X server available with the Server ISO is limited. If you don\u0026rsquo;t have a network with DHCP you can change the tty and using nmtui to setup Networking correctly.
XFCE ISO # To start the Macaroni Installer click to Install System from Applications ‚Üí System ‚Üí Install System.
Gnome ISO # To start the Macaroni installer you need to enter on Applications dashboard and search for install:
6. Follow Installer workflow # 6.1 Welcome: Select Language # In this page if the installer detects correctly at least one hard drive is present the first choice of the user: the select of the language.
At the moment the tested languages are English and Italian but other languages are available. If you find some problem with the other languages open an issue.
6.2 Location: Select Region and Zone # The second page of the installer permits to configure the Region and the timzone.
Choice the right value from the map and go ahead.
6.3 Keyboard: Select Keyboard Model and Language # The third page of the installer permits to configure the Keyboard Model and the langauge.
6.4 Partitions: Select storage device and Partitions # In this page you need to select the storage device from the menu and choice how the installer will prepare the partitions.
If the selected this is empty the installer will propose only two voices: Erase disk and Manual partitioning.
If you try to reinstall Macaroni OS to an existing system and/or replace existing partitions you can select the voice Replace a partition:
If you are a newbie, my suggestion is to use the self partitioning mode from the Macaroni Installer that automatically define three main parititions: efi boot (if you are in EFI env), Swap partition and a Root partition for all data.
Encrypt Full Disk # Macaroni support Encryption of full system, the only partition left in clear is the EFI partition.
To enable the encryption you need to flag Encrypt system and write the passphrase as visible in the screenshot hereinafter:
With the set Encrypt System also the swap partition will be encrypted. The passphrase will be ask on GRUB before to print the Menu.
Manual Partitioning # An expert user could create his custom installation with different partitions, for example, to divide /var/ from /, etc.
Encrypt Home Partition Only # Personally, I think that could be a good compromise to have the rootfs without encryption, this takes things easier on restoring a broken system and instead encrypt the home with user data.
This is possible from Manual Partioning on creating an encrypted partition.
To this it\u0026rsquo;s only needed after selecting the File System type (in the screenshot ext4), to set the Encrypt flag and set the passphrase.
NOTE: On setup, with a configuration with there are single partitions encrypted you need to do some manual operations when the installation is completed or at the first boot. Unfortunately, at the moment the configuration of a single encrypted partition is not handled correctly and automatically by the Calamares installer. So, these steps will be described later.
6.5 Users: Define User and Passwords # It\u0026rsquo;s now time to define the user of your system, write your name and the name of your computer and choice your password.
Normally, the defined user will be the admin user and the same password will be used for root. If you want a different password for root, you need to disable the flag related to the option: Use the same password for the administrator account.
6.6 Summary: Show configured options # At this point, you are near to starting the installation of your Macaroni OS system.
Just check the selected options before starting the installation.
If all is ok, go ahead with Install button.
6.7 Install: The Installation is started # Finally, the Macaroni Installer begins to write your hard drive. The time needed depends on your hardware and the speed of the hard drive.
6.8 Finish: The Installation is completed # Wohoo! Your Macaroni system is ready!
Set the Restart now flag to reboot your computer and to start your Macaroni OS.
6.9 The First boot # Full Encrypted Disk # If you have choice to encrypt the full disk on bootstrap the GRUB will ask for the passphrase inserted in installation phase before display the GRUB menu and go ahead with the bootstrap of your system.
Hereinafter, an example of what could be happens:
Complete the setup of Home\u0026rsquo;s encrypted partition # If you have encrypted only the home partition or any other partition with the workflow described before to have the installation correctly working you need to execute few steps.
a. Retrieve the LUKS filesystem Id
# cat /etc/fstab # /etc/fstab: static file system information. # # Use \u0026#39;blkid\u0026#39; to print the universally unique identifier for a device; this may # be used with UUID= as a more robust way to name devices that works even if # disks are added and removed. See fstab(5). # # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; UUID=ABF5-91D0 /boot/efi vfat defaults,noatime 0 2 UUID=f202c1d1-b131-45f5-8973-8f82cb63d688 / ext4 defaults,noatime 0 1 /dev/mapper/luks-f1504aa0-2594-4221-b741-7ba315b47de0 /home ext4 defaults,noatime 0 2 In this case the needed value is f1504aa0-2594-4221-b741-7ba315b47de0.
b. Editing the GRUB configuration file /etc/default/grub and add this option:
GRUB_CMDLINE_LINUX=\u0026#34;rd.luks.uuid=f1504aa0-2594-4221-b741-7ba315b47de0\u0026#34; Where it\u0026rsquo;s used the LUKS filesystem ID with the option rd.luks.uuid that say to dracut to manage the prompt on Plymouth for uncrypt the home partition before start X.
c. Rebuild the initramfs image with macaronictl
$\u0026gt; macaronictl kernel gi --all --grub Creating initrd image /boot/initramfs-vanilla-x86_64-6.1.18-macaroni...DONE Creating grub config file /boot/grub/grub.cfg... Generating grub configuration file ... Found linux image: /boot/kernel-vanilla-x86_64-6.1.18-macaroni Found initrd image: /boot/initramfs-vanilla-x86_64-6.1.18-macaroni fgrep: warning: fgrep is obsolescent; using /bin/grep -F WARNING: Failed to connect to lvmetad. Falling back to device scanning. done d. Check dmcrypt service
Ensure that the dmcrypt service is enabled on boot runlevel:
$\u0026gt; rc-update show NetworkManager | default avahi-daemon | default binfmt | boot bluetooth | default bootmisc | boot cgroups | sysinit dbus | boot devfs | sysinit device-mapper | sysinit dmcrypt | boot ... Enable it if it\u0026rsquo;s not available with:
$\u0026gt; rc-update add dmcrypt boot e. Reboot your system.
If all is been configured correctly on bootstrap you will see the Plymouth page with the prompt where insert the passphrase to mount home partition:
Install Macaroni LXD Containers # Macaroni OS supply their LXD images over a Simplestreams Server with help of the simplestreams-builder tool.
To configure your LXD system to download Macaroni OS images you need to add the macaroni remote:
$\u0026gt; lxc remote add macaroni https://macaronios.mirror.garr.it/images/lxd-images --protocol simplestreams --public The images are visible with the command:
$\u0026gt; lxc image list macaroni: Install Macaroni Docker Containers # The official Docker Hub user is macaronios.
To play with Macaroni just create your container:
$\u0026gt; docker run --rm -ti macaronios/terragon-minimal:latest-amd64 And then install your packages:
e9c4457e2ce7 / # luet repo update üè† Repository: mottainai-stable Revision: 85 - 2023-04-06 21:04:23 +0000 UTC üè† Repository: geaaru-repo-index Revision: 5 - 2023-03-18 10:12:28 +0000 UTC üè† Repository: macaroni-commons Revision: 137 - 2023-03-19 11:49:39 +0000 UTC üè† Repository: macaroni-terragon Revision: 176 - 2023-04-01 08:45:41 +0000 UTC e9c4457e2ce7 / # luet i vim vim-core htop üöÄ Luet 0.34.2-geaaru-g39b17f43958ab2df8c20f19410df612640428708 2023-03-15 06:03:31 UTC - go1.20.1 üè† Repository: geaaru-repo-index Revision: 5 - 2023-03-18 10:12:28 +0000 UTC üè† Repository: macaroni-commons Revision: 137 - 2023-03-19 11:49:39 +0000 UTC üè† Repository: macaroni-terragon Revision: 176 - 2023-04-01 08:45:41 +0000 UTC üè† Repository: mottainai-stable Revision: 85 - 2023-04-06 21:04:23 +0000 UTC üß† Solving install tree... üç¶ [ 1 of 22] [N] app-admin/eselect::macaroni-terragon - 1.4.14+1 üç¶ [ 2 of 22] [N] app-arch/xz-utils::macaroni-terragon - 5.4.2 üç¶ [ 3 of 22] [N] app-editors/vim::macaroni-terragon - 9.0.1425 üç¶ [ 4 of 22] [N] app-editors/vim-core::macaroni-terragon - 9.0.1425 üç¶ [ 5 of 22] [N] app-eselect/eselect-vi::macaroni-terragon - 1.1.9 üç¶ [ 6 of 22] [N] app-misc/mime-types::macaroni-terragon - 9 üç¶ [ 7 of 22] [N] dev-db-3/sqlite::macaroni-terragon - 3.41.2 üç¶ [ 8 of 22] [N] dev-lang-2/python-exec::macaroni-terragon - 2.4.6 üç¶ [ 9 of 22] [N] dev-lang-3.9/python::macaroni-terragon - 3.9.16 üç¶ [ 10 of 22] [N] dev-libs-3/libnl::macaroni-terragon - 3.4.0 üç¶ [ 11 of 22] [N] dev-libs/libffi::macaroni-terragon - 3.3 üç¶ [ 12 of 22] [N] dev-libs/openssl::macaroni-terragon - 1.1.1q üç¶ [ 13 of 22] [N] dev-python/setuptools::macaroni-terragon - 67.6.1 üç¶ [ 14 of 22] [N] dev-util/cscope::macaroni-terragon - 15.9 üç¶ [ 15 of 22] [N] sys-apps/file::macaroni-terragon - 5.44+1 üç¶ [ 16 of 22] [N] sys-apps/util-linux::macaroni-terragon - 2.38.1+1 üç¶ [ 17 of 22] [N] sys-libs/gdbm::macaroni-terragon - 1.23 üç¶ [ 18 of 22] [N] sys-libs/gpm::macaroni-terragon - 1.20.7 üç¶ [ 19 of 22] [N] sys-libs/libcap-ng::macaroni-terragon - 0.7.9+2 üç¶ [ 20 of 22] [N] sys-libs/libunwind::macaroni-terragon - 1.6.2 üç¶ [ 21 of 22] [N] sys-process/htop::macaroni-terragon - 3.2.2 üç¶ [ 22 of 22] [N] virtual/libc::macaroni-terragon - 1 üíÇ Checking for file conflicts... ‚úîÔ∏è No conflicts found (executed in 820170 ¬µs). Do you want to continue with this operation? [y/N]: Hereinafter, the list of the official Macaroni Docker images available:
Image Release Description macaronios/phoenix-minimal Phoenix The minimal image of the Phoenix release without subets. macaronios/phoenix-minimal-devel Phoenix The minimal image of the Phoenix release with portage and devel subsets. macaronios/phoenix-testing-minimal Phoenix The minimal image of the Phoenix release with testing repositories. macaronios/phoenix-dev-minimal Phoenix The minimal image of the Phoenix release with develop repositories. macaronios/eagle-minimal Eagle The minimal image of the Eagle release without subsets. macaronios/eagle-minimal-devel Eagle The minimal image of the Eagle release with portage and devel subsets. macaronios/eagle-testing-minimal Eagle The minimal image of the Eagle release with testing repositories. macaronios/eagle-dev-minimal Eagle The minimal image of the Eagle release with develop repositories. macaronios/eagle-dev-minimal-devel Eagle The minimal image of the Eagle release with develop repositories and with portage and devel subsets. macaronios/terragon-minimal Terragon The minimal image of the Terragon release without subsets. macaronios/terragon-minimal-devel Terragon The minimal image of the Terragon release with portage and devel subsets. macaronios/terragon-dev-minimal Terragon The minimal image of the Terragon release with develop repositories. `}),e.add({id:10,href:"/docs/",title:"Macaroni OS",section:"Macaroni OS",content:` Why Macaroni OS? # Supply a binary distro that follow the Sabayon OS ideas and permit to convert the rootfs to a pure Funtoo rootfs in a fast way if it\u0026rsquo;s needed for specific customizations or to help the distro fix issues.
You know, the world is buggy, it\u0026rsquo;s better to have a way to check and resolve the problems fast.
In the middle of the story, Macaroni OS wants to be an optimized distro for LXD containers, Docker and Singularity.
So, in summary, these are the core targets of the Macaroni OS Linux:
Container Optimized Through the subsets feature of the Luet tool will make it easy to have a thin rootfs and customize the files installed from a package and run CD/CI tasks and/or pipeline fast. Automation Share a way to build packages without a giant infrastructure but with the pros of CD/CI. Macaroni developer teams share how it\u0026rsquo;s possible to do this through lxd-compose or with a more scalable solution through Mottainai Server. Revolution Hotspot To be a good start point for revolutions within the Linux OS space with the synergy of the Funtoo Team. Macaroni Releases # Following the core targets just described in Macaroni there are different releases:
Release Codename Funtoo Release Description Phoenix 1.4-prime The core release based on OpenRC/SysVinit for Server and Desktop Eagle 1.4-prime + patches A Funtoo SystemD release. The idea is to use it only for Server target and as experimental base rootfs where we will develop an alternative tool that will replace SystemD probably written in Golang but that will be compatible with part of SystemD files. In this moment, this release has only Container based targets and Server services. Terragon next The next release based on OpenRC/SysVinit Funtoo system with Container oriented use flags. Macaroni OS Phoenix # The Phoenix release is the first release created and the only release at the moment for the Desktop. The codename phoenix is related to the immortal bird associated with Greek mythology that cyclically regenerates or is otherwise born again. Associated with the sun, a phoenix obtains new life by rising from the ashes of its predecessor. This is the reason I choose this name: to describe a new beginning and to remember us that also when others try to stop a dream, with the commitment it\u0026rsquo;s possible reborn and goes ahead.
In phoenix it\u0026rsquo;s used the OpenRC as an init system, it\u0026rsquo;s based on Funtoo 1.4-prime and so:
* GCC 9.2.0 * Glibc 2.33 * Python 3.7 * LLVM 11 The desktop environments available in this release are:
Desktop Environment Version Status ISO Available Gnome 3.36 stable yes XFCE 4.16 stable yes LXQt 1.3.0 experimental yes Enlightenment 0.25.4 experimental no KDE 5.22 experimental no i3 4.22 experimental no As the first release a lot of things could be improved but it\u0026rsquo;s also true that the Desktop is something complex that requires a lot of effort and computing. We will work to clean up things and speed up the building phase that now it\u0026rsquo;s very expensive, in particular for the build of the funtoo-base seed based on Gnome Funtoo stage3.
Macaroni OS Eagle # The Eagle release is born to be used in container, it\u0026rsquo;s based on Funtoo 1.4-prime with patches to integrate SystemD as an init system.
Without the need to support the Desktop, the release is been compiled with server-oriented and X-less use flags. This permits to have core packages fewer dependencies and more optimized for containers.
Like phoenix also eagle is based on Funtoo 1.4-prime and so:
* GCC 9.2.0 * Glibc 2.33 * Python 3.7 (2.7 is available but will be dropped in the near future) * LLVM 11 Macaroni OS Terragon # The Terragon release is born to be used in container and it\u0026rsquo;s based on Funtoo Next that is the more innovative release of Funtoo.
Like for eagle release the terragon release is been compiled with server-oriented and X-less use flags.
Based on Funtoo Next some core packages are:
* GCC 11.3.0 * Glibc 2.33 * Python 3.9 Macaroni Repositories # We have three different repositories for any release: a stable repository, a testing repository and, a development repository.
Hereinafter, a summary of our repositories and the packages related.
Repository Stable Testing Development macaroni-commons repository/macaroni-commons repository/macaroni-commons-testing repository/macaroni-commons-dev mottainai repository/mottainai-stable repository/mottainai-testing repository/mottainai-dev macaroni-phoenix (ex macaroni-funtoo) repository/macaroni-phoenix repository/macaroni-phoenix-testing repository/macaroni-phoenix-dev macaroni-eagle (ex macaroni-funtoo-systemd) repository/macaroni-eagle repository/macaroni-eagle-testing repository/macaroni-eagle-dev macaroni-terragon repository/macaroni-terragon repository/macaroni-terragon-testing repository/macaroni-terragon-dev NOTE: The development repositories must be used only by the Staff and are attached to the Macaroni/Mottainai CD/CI flows. The origin server has limited bandwidth so please, use them only for emergencies and/or in collaboration with the Macaroni Team.
Macaroni Commons # The macaroni-commons repository contains the specs for building the Macaroni OS packages common to all releases and all packages compiled without Portage integration.
In particular, in this repository are maintained the Macaroni Kernels.
Normally, this repository is installed by default and present in all Macaroni releases.
Mottainai # The Macaroni Team supports the MottainaiCI organization and the mottainai-stable repository is used to supply the Mottainai tools and luet.
The luet PMS could be used inside other distributions and it makes sense to avoid having a macaroni-commons repository to install and upgrade it. This is the reason we have left our PMS in an independent repository.
Normally, this repository is installed by default.
Macaroni Phoenix # The macaroni-phoenix (previous macaroni-funtoo) repository is the repository of the Phoenix release.
Normally, this repository is installed by default in all Phoenix installation.
Macaroni Eagle # The macaroni-eagle (previous macaroni-funtoo-systemd) repository is the repository of the Eagle release.
Normally, this repository is installed by default in all Eagle installation.
Macaroni Terragon # The macaroni-terragon repository is the repository of the Terragon release.
Normally, this repository is installed by default in all Terragon installation.
Macaroni Tags # In Macaroni the tag means that a specific release is been promoted for the stable repository. Every stable repository contains only a tagged release. There are very few exceptions where I pushed packages in the stable repository that was not related to a tag, and this is been happen for emergency fixes that are been follow soon by a new minor tag.
So, we could consider Macaroni as a rolling release distribution with periodic tags and upgrades.
This choice has pros and cons:
A user that using stable release could easier integration their package based on known packages version and use the specific tree fetched by the tag of the macaroni-funtoo repository to build additional packages. Executing a backup of the Macaroni repository for a specific tag permits him to have a reproducible way to upgrade, install and build packages from a fixed point.
Having a static list of the package version for a specific tag helps IT Teams with the auditing of security issues to have uniform environments controllable.
Wait for a new tag for a security issue could be not an optimal condition, but from my experience, it\u0026rsquo;s often more the time to wait for a fix than the time to release a new tag. By the way, to fix this issue the idea could be to prepare a macaroni-security repository to use in these emergency cases without waiting for a new tag that could be require more time if a build cycle is in progress.
In the Production environment I think that it\u0026rsquo;s better to supply services over container LXD, Docker, or Singularity and thus ensure a more rapid fix of the security issues. In general, the releases Macaroni Terragon and Macaroni Eagle have a more fast build cycle and this permits us to push a more fast fix.
We want to try to follow these periodic tags on our Releases:
Release Rolling Tags Macaroni OS Phoenix every 2 months Macaroni OS Terragon monthly Macaroni OS Eagle monthly It\u0026rsquo;s also possible that minor releases will be tagged in addition to the scheduled tags. The Phoenix for the Desktop requires a lot of effort and testing, this is the reason why the release will be less frequent. We\u0026rsquo;re working to reorganize the tree to speed up the build cycle but this is the job of the next months.
`}),e.add({id:11,href:"/docs/networking/",title:"Networking",section:"Macaroni OS",content:` Networking # Macaroni OS inherits all network configuration ways from Funtoo. In particular, every release could contain one or more ways and/or technologies.
Hereinafter, a table with the different technologies and the availability in the Macaroni releases.
Technology Release Phoenix Release Terragon Release Eagle Network Manager Yes Yes Yes Core Network Yes Yes No SystemD Networkd No No Yes In our ISOs, we use Network Manager that is which seems better integrated with Calamares Installer.
For Server ISO our suggestion is to disable Network Manager when the installation is done and to use the core network scripts.
1. Network Manager # NetworkManager is the standard Linux network configuration tool suite that in the years is been integrated over different desktop environments. It\u0026rsquo;s the default service used by Gnome and could be configured in the different way.
If the service is active, normally, the default configuration automatically uses DHCP protocol on the enabled network interfaces.
From terminal could be used the nmtui tool and nmcli to configure the network.
The package that supplies this service is net-misc/networkmanager and could be extended with extra plugins.
$\u0026gt; luet s networkmanager --table | PACKAGE | VERSION | REPOSITORY | |------------------------------------|------------------|-----------------| | kde-frameworks-5/networkmanager-qt | 5.85.0+2 | macaroni-funtoo | | net-misc/networkmanager | 1.26.0+3 | macaroni-funtoo | | net-vpn/networkmanager-openconnect | 1.2.6.20200831+2 | macaroni-funtoo | | net-vpn/networkmanager-vpnc | 1.2.6+3 | macaroni-funtoo | $\u0026gt; The Network Manager configurations are stored under the directory /etc/NetworkManager/ and could be a good idea to do a backup of this directory when there are a lot of profiles configured.
The Gnome and XFCE DE have their configuration interface that permits configuring the Network Manager service.
The upstream documentation is available over their site.
nmcli # The nmcli tool is parte of the network-manager package and could be used to check the status of the setup of the Network Manager from the terminal.
$\u0026gt; nmcli --help Usage: nmcli [OPTIONS] OBJECT { COMMAND | help } OPTIONS -a, --ask ask for missing parameters -c, --colors auto|yes|no whether to use colors in output -e, --escape yes|no escape columns separators in values -f, --fields \u0026lt;field,...\u0026gt;|all|common specify fields to output -g, --get-values \u0026lt;field,...\u0026gt;|all|common shortcut for -m tabular -t -f -h, --help print this help -m, --mode tabular|multiline output mode -o, --overview overview mode -p, --pretty pretty output -s, --show-secrets allow displaying passwords -t, --terse terse output -v, --version show program version -w, --wait \u0026lt;seconds\u0026gt; set timeout waiting for finishing operations OBJECT g[eneral] NetworkManager\u0026#39;s general status and operations n[etworking] overall networking control r[adio] NetworkManager radio switches c[onnection] NetworkManager\u0026#39;s connections d[evice] devices managed by NetworkManager a[gent] NetworkManager secret agent or polkit agent m[onitor] monitor NetworkManager changes To check the connectivity status:
$\u0026gt; nmcli g STATE CONNECTIVITY WIFI-HW WIFI WWAN-HW WWAN connected full enabled disabled enabled enabled List the connections configured on Network Manager:
$\u0026gt; nmcli c NAME UUID TYPE DEVICE VLAN 50 441acd87-ce63-4af5-bde7-7ce4aec765fd vlan vlan50 UP-Empty c3b0c6d6-5a62-3e4f-9ec8-44526a3f5aba ethernet eth0 Or retrieve the list of the network interfaces availables:
$\u0026gt; nmcli d DEVICE TYPE STATE CONNECTION vlan50 vlan connected VLAN 50 eth0 ethernet connected UP-Empty wlan0 wifi unavailable -- mottainai0 bridge unmanaged -- veth0e8d2a56 ethernet unmanaged -- veth0fda5989 ethernet unmanaged -- veth4d3fd438 ethernet unmanaged -- veth7df4c34c ethernet unmanaged -- vetha71fd414 ethernet unmanaged -- vethbb8d7925 ethernet unmanaged -- vethf25b2272 ethernet unmanaged -- vethfb55205d ethernet unmanaged -- lo loopback unmanaged -- Run man nmcli to a more complete description of all available commands.
nmtui # The nmtui tool is part of the network-manager package and supply a terminal interface based on ncurses library to configure the connections.
Network Manager and LXD # By default Network Manager automatically tries to configure and enable every new interface added to the system and this could be correct when LXD is used.
It\u0026rsquo;s possible to disable this behavior for specific interfaces with the creation of the the file /etc/NetworkManager/NetworkManager.conf or editing it if it\u0026rsquo;s already present and to add the keyfile plugin as reported hereinafter:
[main] plugins=keyfile #[logging] #domains=ALL:TRACE [keyfile] unmanaged-devices=interface-name:veth*,interface-name:mottainai0,interface-name:br-int0,interface-name:ovs* In the example, the interfaces starting with veth or ovs and the interfaces mottainai0 and br-int0 are ignored by NM.
2. Core Network # Inherit from Funtoo for the OpenRC systems, so for both Phoenix and Terragon releases the corenetwork package contains the Funtoo scripts to use for configure the network interfaces on boot.
The concept about the interfaces configuration is that for every interface it\u0026rsquo;s needed create under the directory /etc/init.d the link in the format netif.\u0026lt;iface-name\u0026gt; to the netif.templ file with and then to create the related file under the directory /etc/conf.d/ with the naming convention netif.\u0026lt;iface-name\u0026gt;.
The corenetwork package supplies different templates to use different technologies and/or for different targets. For example, the DHCP could be managed with the tool dhcpd or with dhclient. Every specific template as specific configuration options.
The supported templates are available under the directory /etc/netif.d and in this moment are these:
# luet q files corenetwork | grep netif.d etc/netif.d/bond etc/netif.d/bridge etc/netif.d/bridge-dhcpcd etc/netif.d/bridge-openvswitch etc/netif.d/dhclient etc/netif.d/dhcpcd etc/netif.d/hostapd etc/netif.d/interface etc/netif.d/interface-noip etc/netif.d/ipv6-tunnel etc/netif.d/macvlan etc/netif.d/macvtap etc/netif.d/pppd etc/netif.d/tap etc/netif.d/tunnel etc/netif.d/wireguard etc/netif.d/wpa_supplicant Setup a DHCP interface using the dhcpd template # These the steps to setup the interface eth0 with the DHCP.
root $\u0026gt; cd /etc/init.d root $\u0026gt; ln -s netif.tmpl netif.eth0 root $\u0026gt; rc-update add netif.eth0 default root $\u0026gt; echo template=dhcpcd \u0026gt; /etc/conf.d/netif.eth0 Setup an interface with a static IP # To configure an interface with a static IP it\u0026rsquo;s used the interface template that could be configured with this steps:
root $\u0026gt; cd /etc/init.d root $\u0026gt; ln -s netif.tmpl netif.eth0 root $\u0026gt; rc-update add netif.eth0 default and then editing the file /etc/conf.d/netif.eth0 with this content:
template=\u0026#34;interface\u0026#34; ipaddr=\u0026#34;10.0.1.200/24\u0026#34; gateway=\u0026#34;10.0.1.1\u0026#34; nameservers=\u0026#34;1.1.1.1 8.8.8.8\u0026#34; domain=\u0026#34;mottainai.local\u0026#34; A more completed documentation is available directly from the Funtoo wiki.
3. Systemd Networkd # In the only Eagle release where it\u0026rsquo;s used Systemd could be used the systemd-networkd service for the network configuration.
The configuration files are available under the directory /etc/systemd/network with the extension .network.
For example to configure DHCP on interface eth0 it\u0026rsquo;s possible to create the file /etc/systemd/network/default_dhcp.network with the following content:
[Network] DHCP=ipv4 [Match] Name=eth0 [DHCP] UseDomains=true After the editing and/or creation of the files under /etc/systemd/network to apply the configuration is needed following the commands:
$\u0026gt; systemctl daemon-reload $\u0026gt; systemctl restart systemd-networkd The complete description of all availables options is present on the Freedesktop Website.
`}),e.add({id:12,href:"/docs/pms/",title:"Package Manager System",section:"Macaroni OS",content:` Package Manager System # The Package Manager System of the Macaroni OS is luet. It\u0026rsquo;s written in Golang and it has zero dependencies and permits to prepare environments \u0026ldquo;from scratch\u0026rdquo;.
It was initially based on branch 0.16 of the Mocaccino OS\u0026rsquo;s PMS but later is totally rewritten.
It\u0026rsquo;s composed of two different binary: the luet binary is the PMS client used by users to install packages and the luet-build binary is used to build packages and bump a new repository revision.
It will be rebranding soon in anise.
Luet # 1. Repositories or Wagons # In computer science in general, the term repository describes the place where is available a list of packages.
I saw often in my life that mapping computer science\u0026rsquo;s terms with real entities helps users to create relationships in their minds. So, playing with the term, a synonym of repository is also coal/salt's mine or gold mine. Following this concept in Luet a repository is a wagon where the stones are the packages that a user could require that are got from the gold mine.
The wagon identity is the card that describes the specific wagon: the name, the revision id, the date when the wagon is been prepared, and the URLs are the mine tracks used to get the stones. In addition, for every wagon identity there are different wagon document that contains:
the metafile repository.meta.yaml.tar[.gz|.zstd]: this file is deprecated and will be removed soon. It contains metadata of all stones available in the wagon. Will be soon removed because having a big file with all metadata together consumes a lot of memory resources in the sync phase. It\u0026rsquo;s better to have a tarball with multiple files with the right directories tree.
the tree tarball tree.tar[.gz|.zstd]: this file contains the packages specs (definition.yaml) of the packages present on the source repository when the repository is been bumped.
the compiler tree tarball compilertree.tar[.gz|.zstd]: this file contains the build specs (build.yaml) of the packages present of the source repository when the repository is been bumped.
The wagon documents are validated with a checksum through the first repository file repository.yaml that is been created with a limited number of pieces of information to speed up the checks of the updates.
Hereinafter, an example of the files downloaded in the repo sync phase:
$\u0026gt; luet repo update --debug mottainai-stable DEBUG (root.go:#51:github.com/geaaru/luet/cmd.LoadConfig) Using config file: /etc/luet/luet.yaml DEBUG (loader.go:#38:github.com/geaaru/luet/pkg/repository.LoadRepositories) Parsing Repository Directory /etc/luet/repos.conf.d ... DEBUG (wagon.go:#155:github.com/geaaru/luet/pkg/v2/repository.(*WagonRepository).Sync) Sync of the repository mottainai-stable in progress... DEBUG (http.go:#243:github.com/geaaru/luet/pkg/v2/repository/client.(*HttpClient).DownloadFile) Downloading https://dl.macaronios.org/repos/mottainai/repository.yaml DEBUG (http.go:#255:github.com/geaaru/luet/pkg/v2/repository/client.(*HttpClient).DownloadFile) Downloaded repository.yaml of 0.00 MB ( 0.00 MiB/s ) DEBUG (http.go:#243:github.com/geaaru/luet/pkg/v2/repository/client.(*HttpClient).DownloadFile) Downloading https://dl.macaronios.org/repos/mottainai/tree.tar.zst DEBUG (http.go:#255:github.com/geaaru/luet/pkg/v2/repository/client.(*HttpClient).DownloadFile) Downloaded tree.tar.zst of 0.00 MB ( 0.00 MiB/s ) DEBUG (wagon.go:#207:github.com/geaaru/luet/pkg/v2/repository.(*WagonRepository).Sync) Tree tarball for the repository mottainai-stable downloaded correctly. DEBUG (http.go:#243:github.com/geaaru/luet/pkg/v2/repository/client.(*HttpClient).DownloadFile) Downloading https://dl.macaronios.org/repos/mottainai/repository.meta.yaml.tar.zst DEBUG (http.go:#255:github.com/geaaru/luet/pkg/v2/repository/client.(*HttpClient).DownloadFile) Downloaded repository.meta.yaml.tar.zst of 0.30 MB ( 0.17 MiB/s ) DEBUG (wagon.go:#215:github.com/geaaru/luet/pkg/v2/repository.(*WagonRepository).Sync) Metadata tarball for the repository mottainai-stable downloaded correctly. DEBUG (wagon.go:#228:github.com/geaaru/luet/pkg/v2/repository.(*WagonRepository).Sync) Decompress tree of the repository mottainai-stable... üè† Repository: mottainai-stable Revision: 88 - 2023-04-21 16:15:48 +0000 UTC DEBUG (wagon.go:#289:github.com/geaaru/luet/pkg/v2/repository.(*WagonRepository).ExplodeMetadata) üè† Repository: mottainai-stable unpacking metadata. DEBUG (wagon_stones.go:#1100:github.com/geaaru/luet/pkg/v2/repository.(*WagonStones).LoadCatalog) [mottainai-stable] Found metafile /var/cache/luet/repos/mottainai-stable/metafs/repository.meta.yaml DEBUG (wagon_stones.go:#1122:github.com/geaaru/luet/pkg/v2/repository.(*WagonStones).LoadCatalog) [mottainai-stable] metadata loaded in 199480 ¬µs. In particolar, the sync process download first the repository.yaml file:
$\u0026gt; curl https://dl.macaronios.org/repos/mottainai/repository.yaml name: mottainai-stable description: MottainaiCI Official Repository urls: - http://localhost:8000 type: http enable: true revision: 88 last_update: \u0026#34;1682093748\u0026#34; index: [] repo_files: compilertree: filename: compilertree.tar.gz compressiontype: gzip checksums: sha256: 3e9827097fd8e046c0d74f44c25e8c474204e3bda2a7ca91f20c81965c2001bb meta: filename: repository.meta.yaml.tar.zst compressiontype: zstd checksums: sha256: c0305b0e757827f8538da003cbe6cf03d88fd8636313739892a2dc26cfaa46e3 tree: filename: tree.tar.zst compressiontype: zstd checksums: sha256: 1fe37e7bf858bd8dd3f9c3d1c968081218d6dee8a12c0e3c26cd2c9109159b8e and compare the revision and last_update fields to understand if it\u0026rsquo;s needed go ahead with the download of the wagon document\u0026rsquo;s files.
The urls attribute of the repository.yaml is not used at the moment and it sets with value used locally. It possible that will be removed in the near future or used in validation phase.
The stones could be uncompressed, so shared as simple tar files, or compressed in different formats: gzip or zstd.
The wagons used are based on YAML files that are installed under the directory /etc/luet/repos.conf.d by default. Additional directories where read the repositories YAML files could be added through the luet.yaml configuration file. In particular, the directories are defined through the attribute repos_confdir:
# Define the list of directories where luet # try for files with .yml extension that define # luet repositories. repos_confdir: - /etc/luet/repos.conf.d - /my-repos/ The location where the repositories metadata are unpacked depends on the configuration parameter system.database_path that has the default value equal to /var/cache/luet.
In particular, under the directory /var/cache/luet is present the luet.db file that contains the local BoltDB database where are registered the installed packages, the files of the installed packages, and the finalize of the packages when present.
At the moment the only supported database is BoltDB, but will be added the support of new databases soon.
Under the directory /var/cache/luet there are two directories:
packages: under this directory have stored the tarballs downloaded before executing the installation.
repos: under this directory are created the directories for every repository synced locally.
So, for every repository under the local repository are unpacked the metadata tarballs, in particular:
metafs: under the directory metafs is present the file repository.meta.yaml that contains the metadata of all packages. This directory will be removed in the next release of luet.
repository.yaml: the repository.yaml contains the local data with the wagon identity data.
treefs: under the directory treefs is unpacked the tree of the repository with the following pattern: \u0026lt;package-category\u0026gt;/\u0026lt;package-name\u0026gt;/\u0026lt;package-version\u0026gt;/. Under the package directory are present:
definition.yaml: the file from the repository sources with the main package metadata
metadata.yaml: this file is generated from client-side when a repository is synced. Will be generated by luet-build soon or just replaced only by the metadata.json file.
metadata.json: this file is generated from the client-side when a repository is synced. Will be generated by luet-build soon. It\u0026rsquo;s used the JSON file instead of YAML because to elaborate the JSON file is faster than YAML.
provides.yaml: to speed up the solver logic under the directory treefs is generated the file provides.yaml the contains a map of the packages with provides. Will be generated by luet-build soon.
$\u0026gt; ls /var/cache/luet/repos/macaroni-eagle/treefs/ app-accessibility-2 dev-db dev-libs media-libs provides.yaml sys-libs-4.8 app-admin dev-db-10.5 dev-libs-1 media-libs-1.0 sci-libs sys-power app-arch dev-db-11 dev-libs-2 media-libs-2 seed sys-process app-crypt dev-db-13 dev-libs-3 net-analyzer sys-apps system app-crypt-1 dev-db-3 dev-lisp net-dialup sys-auth toolchain app-doc dev-db-8.0 dev-lisp-2 net-dns sys-block virtual app-editors dev-go dev-perl net-firewall sys-cluster virtual-1 app-emulation dev-java-11 dev-php net-ftp sys-devel virtual-11 app-eselect dev-java-17 dev-python net-libs sys-devel-1.16 virtual-17 app-metrics dev-java-18 dev-python-3 net-libs-1.1 sys-devel-11 virtual-18 app-misc dev-java-2 dev-scheme-12 net-mail sys-devel-2 virtual-entities app-portage dev-java-3.6 dev-tex net-misc sys-devel-2.36 www-apps app-shells dev-java-8 dev-texlive net-nds sys-devel-2.69 www-client app-text dev-lang dev-util net-p2p sys-devel-9.2.0 www-servers app-text-3.0 dev-lang-2 dev-util-3 net-print sys-fs www-servers-2 app-text-4.1.2 dev-lang-2.7 dev-vcs net-proxy sys-fs-3 x11-apps app-text-4.2 dev-lang-3.7 gnome-extra net-vpn sys-kernel x11-base app-text-4.3 dev-lang-7.4 mail-mta net-wireless sys-libs x11-libs app-text-4.5 dev-lang-8.1 media-fonts perl-core sys-libs-18.1 x11-misc dev-cpp dev-lang-stable media-gfx pkglist sys-libs-2.2 x11-proto Hereinafter, an example of a package directory:
$\u0026gt; ls /var/cache/luet/repos/macaroni-eagle/treefs/sys-devel-9.2.0/gcc/9.2.0+1/ definition.yaml metadata.json metadata.yaml 1.1 Show repositories # This command permits to see all installed repositories. In particular, the enabled repositories are colored on green and instead the disabled repositories are in red.
$\u0026gt; luet repo list --help List of the configured repositories. Usage: luet repo list [OPTIONS] [flags] Flags: --disabled Show only disabled repositories. --enabled Show only enabled repositories. -h, --help help for list -q, --quiet Show only name of the repositories. -t, --type string Filter repositories of a specific type -u, --urls Show URLs of the repository. (only in normal mode). The availables options are:
--urls: Show the repositories URLs
--enabled: Show only the enabled repositories
--disabled: Show only the disabled repositories
--type \u0026lt;type\u0026gt;: Filter for repositories of type specified. The types are: \u0026lsquo;http\u0026rsquo;, \u0026lsquo;docker\u0026rsquo;, \u0026lsquo;disk\u0026rsquo;.
--quiet: Show only name of the repositories.
1.2 Enable one or more repositories # This command permits to enable repositories.
$\u0026gt; luet repo enable --help Enable one or more repositories. Usage: luet repo enable \u0026lt;repo1\u0026gt; ... \u0026lt;repoN\u0026gt; [flags] Flags: -h, --help help for enable 1.3 Disable one or more repositories # This command permits to disable repositories.
$\u0026gt; luet repo disable --help Disable one or more repositories. Usage: luet repo disable \u0026lt;repo1\u0026gt; ... \u0026lt;repoN\u0026gt; [flags] Flags: -h, --help help for disable 1.4 Update / Sync one or more repositories # This command permits to sync repositories metadata locally. When the repository is not defined it tries to sync all enabled repositories.
# luet repo update --help Update a specific cached repository or all cached repositories. Usage: luet repo update [repo1] [repo2] [OPTIONS] [flags] Aliases: update, up Examples: # Update all cached repositories: $\u0026gt; luet repo update # Update only repo1 and repo2 $\u0026gt; luet repo update repo1 repo2 Flags: -f, --force Force resync. -h, --help help for update -i, --ignore-errors Ignore errors on sync repositories. --force|-f option permits to force updates of the local trees also when the revision is the same. This is needed for example when a new luet release introduces new local logics.
--ignore-errors|-i option permits to ignore errors on sync. In this case, luet exiting always with zero.
2. Subsets # The subsets is the feature available in luet that permits to filter the file to install from a binary. This permits to choice a runtime what files will be installed and what not.
The subsets\u0026rsquo;s rules could be defined with multple strings regexes.
The definition of the subsets could be defined directly on the package specs in the definition.yaml file or at runtime through subsets definition files.
The packages generate from Funtoo are with two subsets rules directly from the definition.yaml:
annotations: subsets: rules: devel: - ^/usr/include/ portage: - ^/var/db/pkg/ with the subsets devel and portage.
The default directory where to define subsets\u0026rsquo;s definitions is /etc/luet/subsets.def.d but could be modified by the luet configuration option subsets_defdir in the luet.yaml file:
subsets_defdir: - /etc/luet/subsets.def.d The definition of subsets under the /etc/luet/subsets.def.d doesn\u0026rsquo;t use the same format of the annotations. The key of the map describe the name of the subset that is also defined in the name attribute. The specified rules could be applied in this order:
rules defined inside the package definition
rules defined by a local definition for the category of the package. These rules can be used to override the package definition.
rules defined by a local definition for the package
NOTE: When is present a rule for the package the categories rules are ignored.
At the moment there isn\u0026rsquo;t a wildcard key to use for every package, so to define a specific rule for every package you need to define all the possible categories.
The logic applied from luet with the subsets rules works in reverse, when are defined the rules, these rules are configured, thanks to the tar-formers library as ignore rules when the subset mapped to the rules is not enabled.
To clarify the behavior I sharing an example. In Sabayon the gcc package was split into the sys-devel/base-gcc package and sys-deve/gcc to permit to have the core libraries linked to a lot of packages that are compiled with the GCC package without the need to have the compiler too.
Thanks to the subsets, instead of split the package a way to reach the same result is to define a subset definition like this:
$\u0026gt; echo \u0026#34; subsets_def: gcc-devel: description: \\\u0026#34;Split gcc compiler stuff\\\u0026#34; name: \\\u0026#34;gcc-devel\\\u0026#34; rules: - ^/usr/x86_64-pc-linux-gnu/gcc-bin/9.2.0/ - ^/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.0/plugin/include/ - ^/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.0/include/ - ^/usr/lib/gcc/x86_64-pc-linux-gnu/9.2.0/finclude/omp* - ^/usr/share/gcc-data/x86_64-pc-linux-gnu/9.2.0/ - ^/usr/libexec/gcc/x86_64-pc-linux-gnu/9.2.0 - ^/usr/bin/ packages: - sys-devel-9.2.0/gcc \u0026#34; \u0026gt; /etc/luet/subsets.def.d/00-gcc.yaml With this definition, luet will install all files that don\u0026rsquo;t match with the rules defined when the subsets gcc-devel is not enabled. In the example, the definition is strictly mapped to the package sys-devel-9.2.0/gcc.
Normally, the gcc package is installed by default because it\u0026rsquo;s a require of a lot of packages. This means that if the definition is added later to be applied must reinstalled the package.
To do this job the better solution is to use the low-level command luet miner reinstall-package:
$\u0026gt; luet miner ri sys-devel-9.2.0/gcc The list of the subsets enabled could be configured in two ways. On configuring the list of the subsets in the configuration file luet.yaml:
subsets: enabled: - portage - devel subsets_confdir: - /etc/luet/subsets.conf.d or through specific files under the directories defined in the attribute subsets_confdir.
The files under the directory /etc/luet/subsets.conf.d are in the format:
enabled: - gcc-devel At the moment, luet doesn\u0026rsquo;t supply commands to iterate with subsets definition but new commands are in our backlog.
2.1. Subsets list # This command permits to show the list of subsets enabled.
$ luet subsets list --help List of subsets enabled. Usage: luet subsets list [OPTIONS] [flags] Flags: -h, --help help for list -q, --quiet Show only name of the repositories. In particular, the description of the subsets devel and portage are visible by default also if the definition is not present.
$\u0026gt; luet subsets list üç® Subsets enabled: * portage Portage metadata and files. * devel Includes and devel files. Needed for compilation. --quiet: show only the name of the subset enabled. 2.2. Enable one or more subsets # This command permits to enable one or more subsets.
$\u0026gt; luet subsets enable --help Enable one or more subsets as subsets config file. $\u0026gt; luet subsets enable devel portage mysubset $\u0026gt; luet subsets enable -f my devel portage mysubset The filename is used to write/update the file under the first directory defined on subsets_confdir option (for example /etc/luet/subsets.conf.d/my.yml else main.yml is used). Usage: luet subsets enable [OPTIONS] \u0026lt;subset1\u0026gt; ... \u0026lt;subsetN\u0026gt; [flags] Flags: -f, --file string Define the filename without extension where enable the subsets. -h, --help help for enable By default this command add the subsets to the main.yml or to the file defined by the -f option:
$\u0026gt; luet subsets enable gcc-devel Subsets gcc-devel enabled ‚úî . That generates this content:
$\u0026gt; cat /etc/luet/subsets.conf.d/main.yml enabled: - gcc-devel Instead to enable the gcc-devel subset under the gcc.yml file:
$\u0026gt; luet subsets enable -f gcc gcc-devel Subsets gcc-devel enabled ‚úî . With this output:
$\u0026gt; cat /etc/luet/subsets.conf.d/gcc.yml enabled: - gcc-devel 2.3. Disable one or more subsets # This command permits to disable one or more subsets.
$\u0026gt; luet subsets disable --help Disable one or more subsets as subsets config file. $\u0026gt; luet subsets disable devel portage mysubset $\u0026gt; luet subsets disable -f my devel portage mysubset The filename is used to write/update the file under the first directory defined on subsets_confdir option (for example /etc/luet/subsets.conf.d/my.yml else main.yml is used). Usage: luet subsets disable [OPTIONS] \u0026lt;subset1\u0026gt; ... \u0026lt;subsetN\u0026gt; [flags] Flags: -f, --file string Define the filename without extension where enable the subsets. -h, --help help for disable 3. Search packages # This command permits to search packages available in the configured repositories or between installed packages.
$ luet s --help Search for installed and available packages To search a package in the repositories: $ luet search \u0026lt;regex1\u0026gt; ... \u0026lt;regexN\u0026gt; To search a package and display results in a table (wide screens): $ luet search --table \u0026lt;regex\u0026gt; To look into the installed packages: $ luet search --installed \u0026lt;regex\u0026gt; Note: the regex argument is optional, if omitted implies \u0026#34;all\u0026#34; To search a package by label: $ luet search --label \u0026lt;label1\u0026gt;,\u0026lt;label2\u0026gt;...,\u0026lt;labelN\u0026gt; or by regex against the label: $ luet search --rlabel \u0026lt;regex-label1\u0026gt;,..,\u0026lt;regex-labelN\u0026gt; or by categories: $ luet search --category \u0026lt;cat1\u0026gt;,..,\u0026lt;catN\u0026gt; or by names: $ luet search --name|-n \u0026lt;name1\u0026gt;,..,\u0026lt;nameN\u0026gt; or by annotations: $ luet search --annotation \u0026lt;annotation1\u0026gt;,..,\u0026lt;annotationN\u0026gt; or by package (used only category and package name for name in the format cat/foo) $ luet search -p \u0026lt;cat/foo\u0026gt;,\u0026lt;cat/foo2\u0026gt; Search can also return results in the terminal in different ways: as terminal output, as json or as yaml. $ luet search -o json \u0026lt;regex\u0026gt; # JSON output $ luet search -o yaml \u0026lt;regex\u0026gt; # YAML output Usage: luet search \u0026lt;term\u0026gt; [flags] Aliases: search, s Flags: -a, --annotation strings Search packages through one or more annotations. --category strings Search packages through one or more categories regex. --condition-or The searching options are managed in OR between the searching types. --files Show package files on YAML/JSON output. --full Show full informations. -h, --help help for search --hidden Include hidden packages --ignore-masks Ignore packages masked. --installed Search between system packages --label strings Search packages through one or more labels. -n, --name strings Search packages matching the package name string. -o, --output string Output format ( Defaults: terminal, available: json,yaml ) (default \u0026#34;terminal\u0026#34;) -p, --package strings Search packages matching the package string cat/name. --quiet show output as list without version --rlabel strings Search packages through one or more labels regex. --system-dbpath string System db path --system-engine string System DB engine --system-target string System rootpath --table show output in a table (wider screens) --with-rootfs-prefix Add prefix of the configured rootfs path. (default true) 4. Install packages # This command permits to install packages from the configured repositories.
$ luet i --help Installs one or more packages without asking questions: $ luet install -y utils/busybox utils/yq ... To install only deps of a package: $ luet install --onlydeps utils/busybox ... To not install deps of a package: $ luet install --nodeps utils/busybox ... To force install a package: $ luet install --force utils/busybox ... Usage: luet install \u0026lt;pkg1\u0026gt; \u0026lt;pkg2\u0026gt; ... [flags] Aliases: install, i Flags: --download-only Download only --finalizer-env stringArray Set finalizer environment in the format key=value. --force Skip errors and keep going (potentially harmful) -h, --help help for install --ignore-conflicts Don\u0026#39;t consider package conflicts (harmful!) --ignore-masks Ignore packages masked. --nodeps Don\u0026#39;t consider package dependencies (harmful!) --overwrite-existing-dir-perms Overwrite exiting directories permissions. --preserve-system-essentials Preserve system luet files (default true) -p, --pretend simply display what *would* have been installed if --pretend weren\u0026#39;t used --show-install-order In additional of the package to install, show the installation order and exit. --skip-check-system Skip conflicts check with existing rootfs. --skip-finalizers Skip the execution of the finalizers. --sync-repos Sync repositories before install. Note: If there are in memory repositories then the sync is done always. -y, --yes Don\u0026#39;t ask questions 4.1. Show packages candidates to install # This command permit to see what packages are candidates for the selected packages to install.
In particular, the option --pretend|-p shows the list of the packages selected from the solver to install in alphabetic order.
$\u0026gt; luet i xdg-utils --pretend üöÄ Luet 0.35.4-geaaru-g3fcfc36cea5636d539d55117b8befc07e0812083 2023-04-04 09:46:02 UTC - go1.20.2 üè† Repository: geaaru-repo-index Revision: 5 - 2023-03-18 10:12:28 +0000 UTC üè† Repository: macaroni-commons-testing Revision: 137 - 2023-03-19 11:49:39 +0000 UTC üè† Repository: macaroni-eagle-dev Revision: 480 - 2023-04-13 01:14:59 +0000 UTC üè† Repository: mottainai-dev Revision: 88 - 2023-04-21 16:15:48 +0000 UTC üß† Solving install tree... üç¶ [ 1 of 36] [N] dev-libs-2/glib::macaroni-eagle-dev - 2.70.0 üç¶ [ 2 of 36] [N] dev-libs/libpthread-stubs::macaroni-eagle-dev - 0.4 üç¶ [ 3 of 36] [N] dev-perl/File-BaseDir::macaroni-eagle-dev - 0.70.0 üç¶ [ 4 of 36] [N] dev-perl/File-DesktopEntry::macaroni-eagle-dev - 0.220.0 üç¶ [ 5 of 36] [N] dev-perl/File-MimeInfo::macaroni-eagle-dev - 0.280.0 üç¶ [ 6 of 36] [N] dev-perl/IPC-System-Simple::macaroni-eagle-dev - 1.250.0 üç¶ [ 7 of 36] [N] dev-perl/URI::macaroni-eagle-dev - 1.730.0 üç¶ [ 8 of 36] [N] dev-util/desktop-file-utils::macaroni-eagle-dev - 0.23 üç¶ [ 9 of 36] [N] dev-util/gdbus-codegen::macaroni-eagle-dev - 2.70.0 üç¶ [ 10 of 36] [N] virtual/libelf::macaroni-eagle-dev - 3 üç¶ [ 11 of 36] [N] virtual/perl-Carp::macaroni-eagle-dev - 1.500.0 üç¶ [ 12 of 36] [N] virtual/perl-Data-Dumper::macaroni-eagle-dev - 2.174.0 üç¶ [ 13 of 36] [N] virtual/perl-Encode::macaroni-eagle-dev - 3.60.0 üç¶ [ 14 of 36] [N] virtual/perl-Exporter::macaroni-eagle-dev - 5.740.0 üç¶ [ 15 of 36] [N] virtual/perl-File-Path::macaroni-eagle-dev - 2.160.0 üç¶ [ 16 of 36] [N] virtual/perl-File-Spec::macaroni-eagle-dev - 3.780.0 üç¶ [ 17 of 36] [N] virtual/perl-MIME-Base64::macaroni-eagle-dev - 3.150.0 üç¶ [ 18 of 36] [N] virtual/perl-Scalar-List-Utils::macaroni-eagle-dev - 1.550.0 üç¶ [ 19 of 36] [N] virtual/perl-libnet::macaroni-eagle-dev - 3.110.0 üç¶ [ 20 of 36] [N] virtual/perl-parent::macaroni-eagle-dev - 0.238.0 üç¶ [ 21 of 36] [N] x11-apps/xprop::macaroni-eagle-dev - 1.2.4 üç¶ [ 22 of 36] [N] x11-apps/xset::macaroni-eagle-dev - 1.2.4 üç¶ [ 23 of 36] [N] x11-base/xorg-proto::macaroni-eagle-dev - 2019.2 üç¶ [ 24 of 36] [N] x11-libs/libICE::macaroni-eagle-dev - 1.0.10 üç¶ [ 25 of 36] [N] x11-libs/libSM::macaroni-eagle-dev - 1.2.3 üç¶ [ 26 of 36] [N] x11-libs/libX11::macaroni-eagle-dev - 1.8.2 üç¶ [ 27 of 36] [N] x11-libs/libXau::macaroni-eagle-dev - 1.0.9 üç¶ [ 28 of 36] [N] x11-libs/libXdmcp::macaroni-eagle-dev - 1.1.3 üç¶ [ 29 of 36] [N] x11-libs/libXext::macaroni-eagle-dev - 1.3.4 üç¶ [ 30 of 36] [N] x11-libs/libXmu::macaroni-eagle-dev - 1.1.3 üç¶ [ 31 of 36] [N] x11-libs/libXt::macaroni-eagle-dev - 1.2.0 üç¶ [ 32 of 36] [N] x11-libs/libxcb::macaroni-eagle-dev - 1.14+1 üç¶ [ 33 of 36] [N] x11-libs/xtrans::macaroni-eagle-dev - 1.4.0 üç¶ [ 34 of 36] [N] x11-misc/compose-tables::macaroni-eagle-dev - 1.8.1 üç¶ [ 35 of 36] [N] x11-misc/shared-mime-info::macaroni-eagle-dev - 1.10 üç¶ [ 36 of 36] [N] x11-misc/xdg-utils::macaroni-eagle-dev - 1.1.3 üíÇ Checking for file conflicts... ‚úîÔ∏è No conflicts found (executed in 5966 ¬µs). üéä All done. Usually, it\u0026rsquo;s better to see the packages in alphabetic order, this help research and pre-install checks.
There are use cases, that could help to see what will be the install order, for example, to validate the solver. In this case, it\u0026rsquo;s possible to use the option --show-install-order that will share the order of the operations after the download of the packages.
# luet i xdg-utils --show-install-order üöÄ Luet 0.35.4-geaaru-g3fcfc36cea5636d539d55117b8befc07e0812083 2023-04-04 09:46:02 UTC - go1.20.2 üè† Repository: geaaru-repo-index Revision: 5 - 2023-03-18 10:12:28 +0000 UTC üè† Repository: macaroni-commons-testing Revision: 137 - 2023-03-19 11:49:39 +0000 UTC üè† Repository: macaroni-eagle-dev Revision: 480 - 2023-04-13 01:14:59 +0000 UTC üè† Repository: mottainai-dev Revision: 88 - 2023-04-21 16:15:48 +0000 UTC üß† Solving install tree... üç¶ [ 1 of 36] [N] dev-libs-2/glib::macaroni-eagle-dev - 2.70.0 üç¶ [ 2 of 36] [N] dev-libs/libpthread-stubs::macaroni-eagle-dev - 0.4 üç¶ [ 3 of 36] [N] dev-perl/File-BaseDir::macaroni-eagle-dev - 0.70.0 üç¶ [ 4 of 36] [N] dev-perl/File-DesktopEntry::macaroni-eagle-dev - 0.220.0 üç¶ [ 5 of 36] [N] dev-perl/File-MimeInfo::macaroni-eagle-dev - 0.280.0 üç¶ [ 6 of 36] [N] dev-perl/IPC-System-Simple::macaroni-eagle-dev - 1.250.0 üç¶ [ 7 of 36] [N] dev-perl/URI::macaroni-eagle-dev - 1.730.0 üç¶ [ 8 of 36] [N] dev-util/desktop-file-utils::macaroni-eagle-dev - 0.23 üç¶ [ 9 of 36] [N] dev-util/gdbus-codegen::macaroni-eagle-dev - 2.70.0 üç¶ [ 10 of 36] [N] virtual/libelf::macaroni-eagle-dev - 3 üç¶ [ 11 of 36] [N] virtual/perl-Carp::macaroni-eagle-dev - 1.500.0 üç¶ [ 12 of 36] [N] virtual/perl-Data-Dumper::macaroni-eagle-dev - 2.174.0 üç¶ [ 13 of 36] [N] virtual/perl-Encode::macaroni-eagle-dev - 3.60.0 üç¶ [ 14 of 36] [N] virtual/perl-Exporter::macaroni-eagle-dev - 5.740.0 üç¶ [ 15 of 36] [N] virtual/perl-File-Path::macaroni-eagle-dev - 2.160.0 üç¶ [ 16 of 36] [N] virtual/perl-File-Spec::macaroni-eagle-dev - 3.780.0 üç¶ [ 17 of 36] [N] virtual/perl-MIME-Base64::macaroni-eagle-dev - 3.150.0 üç¶ [ 18 of 36] [N] virtual/perl-Scalar-List-Utils::macaroni-eagle-dev - 1.550.0 üç¶ [ 19 of 36] [N] virtual/perl-libnet::macaroni-eagle-dev - 3.110.0 üç¶ [ 20 of 36] [N] virtual/perl-parent::macaroni-eagle-dev - 0.238.0 üç¶ [ 21 of 36] [N] x11-apps/xprop::macaroni-eagle-dev - 1.2.4 üç¶ [ 22 of 36] [N] x11-apps/xset::macaroni-eagle-dev - 1.2.4 üç¶ [ 23 of 36] [N] x11-base/xorg-proto::macaroni-eagle-dev - 2019.2 üç¶ [ 24 of 36] [N] x11-libs/libICE::macaroni-eagle-dev - 1.0.10 üç¶ [ 25 of 36] [N] x11-libs/libSM::macaroni-eagle-dev - 1.2.3 üç¶ [ 26 of 36] [N] x11-libs/libX11::macaroni-eagle-dev - 1.8.2 üç¶ [ 27 of 36] [N] x11-libs/libXau::macaroni-eagle-dev - 1.0.9 üç¶ [ 28 of 36] [N] x11-libs/libXdmcp::macaroni-eagle-dev - 1.1.3 üç¶ [ 29 of 36] [N] x11-libs/libXext::macaroni-eagle-dev - 1.3.4 üç¶ [ 30 of 36] [N] x11-libs/libXmu::macaroni-eagle-dev - 1.1.3 üç¶ [ 31 of 36] [N] x11-libs/libXt::macaroni-eagle-dev - 1.2.0 üç¶ [ 32 of 36] [N] x11-libs/libxcb::macaroni-eagle-dev - 1.14+1 üç¶ [ 33 of 36] [N] x11-libs/xtrans::macaroni-eagle-dev - 1.4.0 üç¶ [ 34 of 36] [N] x11-misc/compose-tables::macaroni-eagle-dev - 1.8.1 üç¶ [ 35 of 36] [N] x11-misc/shared-mime-info::macaroni-eagle-dev - 1.10 üç¶ [ 36 of 36] [N] x11-misc/xdg-utils::macaroni-eagle-dev - 1.1.3 üíÇ Checking for file conflicts... ‚úîÔ∏è No conflicts found (executed in 6343 ¬µs). üöö Downloading 36 packages... üì¶ [ 1 of 36] x11-misc/xdg-utils::macaroni-eagle-dev - 1.1.3 # downloaded ‚úî üì¶ [ 2 of 36] x11-libs/libX11::macaroni-eagle-dev - 1.8.2 # downloaded ‚úî üì¶ [ 3 of 36] x11-libs/xtrans::macaroni-eagle-dev - 1.4.0 # downloaded ‚úî üì¶ [ 4 of 36] x11-libs/libSM::macaroni-eagle-dev - 1.2.3 # downloaded ‚úî üì¶ [ 5 of 36] x11-libs/libXt::macaroni-eagle-dev - 1.2.0 # downloaded ‚úî üì¶ [ 6 of 36] x11-base/xorg-proto::macaroni-eagle-dev - 2019.2 # downloaded ‚úî üì¶ [ 7 of 36] virtual/perl-Scalar-List-Utils::macaroni-eagle-dev - 1.550.0 # downloaded ‚úî üì¶ [ 8 of 36] virtual/perl-MIME-Base64::macaroni-eagle-dev - 3.150.0 # downloaded ‚úî üì¶ [ 9 of 36] x11-misc/shared-mime-info::macaroni-eagle-dev - 1.10 # downloaded ‚úî üì¶ [ 10 of 36] dev-util/desktop-file-utils::macaroni-eagle-dev - 0.23 # downloaded ‚úî üì¶ [ 11 of 36] virtual/perl-Carp::macaroni-eagle-dev - 1.500.0 # downloaded ‚úî üì¶ [ 12 of 36] dev-perl/File-BaseDir::macaroni-eagle-dev - 0.70.0 # downloaded ‚úî üì¶ [ 13 of 36] virtual/perl-Encode::macaroni-eagle-dev - 3.60.0 # downloaded ‚úî üì¶ [ 14 of 36] x11-libs/libXmu::macaroni-eagle-dev - 1.1.3 # downloaded ‚úî üì¶ [ 15 of 36] x11-apps/xset::macaroni-eagle-dev - 1.2.4 # downloaded ‚úî üì¶ [ 16 of 36] virtual/perl-Data-Dumper::macaroni-eagle-dev - 2.174.0 # downloaded ‚úî üì¶ [ 17 of 36] dev-perl/File-MimeInfo::macaroni-eagle-dev - 0.280.0 # downloaded ‚úî üì¶ [ 18 of 36] x11-libs/libXau::macaroni-eagle-dev - 1.0.9 # downloaded ‚úî üì¶ [ 19 of 36] x11-libs/libXext::macaroni-eagle-dev - 1.3.4 # downloaded ‚úî üì¶ [ 20 of 36] dev-util/gdbus-codegen::macaroni-eagle-dev - 2.70.0 # downloaded ‚úî üì¶ [ 21 of 36] dev-libs/libpthread-stubs::macaroni-eagle-dev - 0.4 # downloaded ‚úî üì¶ [ 22 of 36] x11-libs/libxcb::macaroni-eagle-dev - 1.14+1 # downloaded ‚úî üì¶ [ 23 of 36] virtual/perl-File-Spec::macaroni-eagle-dev - 3.780.0 # downloaded ‚úî üì¶ [ 24 of 36] dev-perl/URI::macaroni-eagle-dev - 1.730.0 # downloaded ‚úî üì¶ [ 25 of 36] virtual/perl-File-Path::macaroni-eagle-dev - 2.160.0 # downloaded ‚úî üì¶ [ 26 of 36] dev-perl/File-DesktopEntry::macaroni-eagle-dev - 0.220.0 # downloaded ‚úî üì¶ [ 27 of 36] dev-perl/IPC-System-Simple::macaroni-eagle-dev - 1.250.0 # downloaded ‚úî üì¶ [ 28 of 36] x11-libs/libXdmcp::macaroni-eagle-dev - 1.1.3 # downloaded ‚úî üì¶ [ 29 of 36] x11-libs/libICE::macaroni-eagle-dev - 1.0.10 # downloaded ‚úî üì¶ [ 30 of 36] x11-apps/xprop::macaroni-eagle-dev - 1.2.4 # downloaded ‚úî üì¶ [ 31 of 36] virtual/perl-libnet::macaroni-eagle-dev - 3.110.0 # downloaded ‚úî üì¶ [ 32 of 36] virtual/perl-parent::macaroni-eagle-dev - 0.238.0 # downloaded ‚úî üì¶ [ 33 of 36] virtual/libelf::macaroni-eagle-dev - 3 # downloaded ‚úî üì¶ [ 34 of 36] dev-libs-2/glib::macaroni-eagle-dev - 2.70.0 # downloaded ‚úî üì¶ [ 35 of 36] virtual/perl-Exporter::macaroni-eagle-dev - 5.740.0 # downloaded ‚úî üì¶ [ 36 of 36] x11-misc/compose-tables::macaroni-eagle-dev - 1.8.1 # downloaded ‚úî üß† Sorting 36 packages operations... üß† Install order: üç¶ [ 1 of 36] [N] dev-libs/libpthread-stubs::macaroni-eagle-dev - 0.4 üç¶ [ 2 of 36] [N] dev-util/gdbus-codegen::macaroni-eagle-dev - 2.70.0 üç¶ [ 3 of 36] [N] virtual/libelf::macaroni-eagle-dev - 3 üç¶ [ 4 of 36] [N] virtual/perl-Carp::macaroni-eagle-dev - 1.500.0 üç¶ [ 5 of 36] [N] virtual/perl-Data-Dumper::macaroni-eagle-dev - 2.174.0 üç¶ [ 6 of 36] [N] virtual/perl-Encode::macaroni-eagle-dev - 3.60.0 üç¶ [ 7 of 36] [N] virtual/perl-Exporter::macaroni-eagle-dev - 5.740.0 üç¶ [ 8 of 36] [N] virtual/perl-File-Path::macaroni-eagle-dev - 2.160.0 üç¶ [ 9 of 36] [N] virtual/perl-File-Spec::macaroni-eagle-dev - 3.780.0 üç¶ [ 10 of 36] [N] virtual/perl-MIME-Base64::macaroni-eagle-dev - 3.150.0 üç¶ [ 11 of 36] [N] virtual/perl-Scalar-List-Utils::macaroni-eagle-dev - 1.550.0 üç¶ [ 12 of 36] [N] virtual/perl-libnet::macaroni-eagle-dev - 3.110.0 üç¶ [ 13 of 36] [N] virtual/perl-parent::macaroni-eagle-dev - 0.238.0 üç¶ [ 14 of 36] [N] x11-base/xorg-proto::macaroni-eagle-dev - 2019.2 üç¶ [ 15 of 36] [N] x11-libs/xtrans::macaroni-eagle-dev - 1.4.0 üç¶ [ 16 of 36] [N] x11-misc/compose-tables::macaroni-eagle-dev - 1.8.1 üç¶ [ 17 of 36] [N] x11-libs/libXau::macaroni-eagle-dev - 1.0.9 üç¶ [ 18 of 36] [N] x11-libs/libXdmcp::macaroni-eagle-dev - 1.1.3 üç¶ [ 19 of 36] [N] dev-libs-2/glib::macaroni-eagle-dev - 2.70.0 üç¶ [ 20 of 36] [N] x11-misc/shared-mime-info::macaroni-eagle-dev - 1.10 üç¶ [ 21 of 36] [N] dev-util/desktop-file-utils::macaroni-eagle-dev - 0.23 üç¶ [ 22 of 36] [N] x11-libs/libICE::macaroni-eagle-dev - 1.0.10 üç¶ [ 23 of 36] [N] x11-libs/libSM::macaroni-eagle-dev - 1.2.3 üç¶ [ 24 of 36] [N] dev-perl/IPC-System-Simple::macaroni-eagle-dev - 1.250.0 üç¶ [ 25 of 36] [N] dev-perl/File-BaseDir::macaroni-eagle-dev - 0.70.0 üç¶ [ 26 of 36] [N] x11-libs/libxcb::macaroni-eagle-dev - 1.14+1 üç¶ [ 27 of 36] [N] x11-libs/libX11::macaroni-eagle-dev - 1.8.2 üç¶ [ 28 of 36] [N] dev-perl/URI::macaroni-eagle-dev - 1.730.0 üç¶ [ 29 of 36] [N] x11-libs/libXt::macaroni-eagle-dev - 1.2.0 üç¶ [ 30 of 36] [N] dev-perl/File-DesktopEntry::macaroni-eagle-dev - 0.220.0 üç¶ [ 31 of 36] [N] x11-apps/xprop::macaroni-eagle-dev - 1.2.4 üç¶ [ 32 of 36] [N] x11-libs/libXext::macaroni-eagle-dev - 1.3.4 üç¶ [ 33 of 36] [N] x11-libs/libXmu::macaroni-eagle-dev - 1.1.3 üç¶ [ 34 of 36] [N] x11-apps/xset::macaroni-eagle-dev - 1.2.4 üç¶ [ 35 of 36] [N] dev-perl/File-MimeInfo::macaroni-eagle-dev - 0.280.0 üç¶ [ 36 of 36] [N] x11-misc/xdg-utils::macaroni-eagle-dev - 1.1.3 üéä All done. 5. Cleanup local cache # The tree of the installed repositories installed under the directory /var/cache/luet/repos are not mandatory when the user had installed the packages.
Through the cleanup command it\u0026rsquo;s possible clean the cache of the downloaded files:
$\u0026gt; luet cleanup Cleaned: 36 packages. and to clean all the repositories under the directory /var/cache/luet/repos with:
$\u0026gt; luet cleanup --purge-repos Cleaned: 0 packages. Repos Cleaned: 17 6. Uninstall packages # The command uninstall or rm permits to uninstall installed packages.
$\u0026gt; luet uninstall --help Remove one or more package and his dependencies recursively $ luet uninstall cat/foo1 ... cat/foo2 Remove one or more packages without dependencies $ luet uninstall cat/foo1 ... --nodeps Remove one or more packages and skip errors $ luet uninstall cat/foo1 ... --force Remove one or more packages without ask confirm $ luet uninstall cat/foo1 ... --yes Remove one or more packages without ask confirm and skip execution of the finalizers. $ luet uninstall cat/foo1 ... --yes --skip-finalizers Usage: luet uninstall \u0026lt;pkg\u0026gt; \u0026lt;pkg2\u0026gt; ... [flags] Aliases: uninstall, rm, un Flags: --finalizer-env stringArray Set finalizer environment in the format key=value. --force Force uninstall -h, --help help for uninstall -k, --keep-protected-files Keep package protected files around --nodeps Don\u0026#39;t consider package dependencies (harmful! overrides checkconflicts and full!) --preserve-system-essentials Preserve system luet files (default true) --skip-finalizers Skip the execution of the finalizers. -y, --yes Don\u0026#39;t ask questions By default the selected packages are removed with all packages that depend on the candidates in reverse order. To avoid the dependencies could be used the --nodeps option.
--yes|-y: skip the confirm phase.
--force: ignore errors and for uninstall of the selected packages.
--keep-protected-files|-k: keep the protected files.
--nodeps: ignore dependencies on uninstall selected packages.
--finalizer-env \u0026lt;key=value\u0026gt;: define one or more environment variables to use on finalizer
7. Upgrade the system # The upgrade of the existing system is possible through the upgrade command.
$\u0026gt; luet upgrade üöÄ Luet 0.35.4-geaaru-g3fcfc36cea5636d539d55117b8befc07e0812083 2023-04-04 09:46:02 UTC - go1.20.2 üè† Repository: geaaru-repo-index Revision: 5 - 2023-03-18 10:12:28 +0000 UTC üè† Repository: macaroni-commons-testing Revision: 137 - 2023-03-19 11:49:39 +0000 UTC üè† Repository: macaroni-eagle-dev Revision: 480 - 2023-04-13 01:14:59 +0000 UTC üè† Repository: mottainai-dev Revision: 88 - 2023-04-21 16:15:48 +0000 UTC ü§î Computing upgrade, please hang tight... üí§ üéâ Upgrades: üç¨ [ 1 of 1] [U] system/luet-geaaru-testing::mottainai-dev - 0.35.5 [0.35.4::mottainai-stable] üíÇ Checking for file conflicts... ‚úîÔ∏è No conflicts found (executed in 40018 ¬µs). Do you want to continue with this operation? [y/N]: --show-upgrade-order: Show the order of the packages to upgrade
--sync-repos: On upgrade the system, sync the repository before execute the solver.
--yes|y: Skip the confirm question
--ignore-masks: Ignores the masks
--ignore-conflicts: Ignore the conflicts
--pretend: Show the candidates for the upgrade
--show-upgrade-order: Show the order of the packages to upgrade
--skip-finalizers: Skip finalizers
--force: Ignore errors and force installation of all candidates packages.
--download-only: Download only the packages candidates.
$\u0026gt; luet upgrade --show-upgrade-order üöÄ Luet 0.35.4-geaaru-g3fcfc36cea5636d539d55117b8befc07e0812083 2023-04-04 09:46:02 UTC - go1.20.2 üè† Repository: geaaru-repo-index Revision: 5 - 2023-03-18 10:12:28 +0000 UTC üè† Repository: macaroni-commons-testing Revision: 137 - 2023-03-19 11:49:39 +0000 UTC üè† Repository: macaroni-eagle-dev Revision: 480 - 2023-04-13 01:14:59 +0000 UTC üè† Repository: mottainai-dev Revision: 88 - 2023-04-21 16:15:48 +0000 UTC ü§î Computing upgrade, please hang tight... üí§ üéâ Upgrades: üç¨ [ 1 of 1] [U] system/luet-geaaru-testing::mottainai-dev - 0.35.5 [0.35.4::mottainai-stable] üíÇ Checking for file conflicts... ‚úîÔ∏è No conflicts found (executed in 107 ¬µs). üöö Downloading 1 packages... üì¶ [ 1 of 1] system/luet-geaaru-testing::mottainai-dev - 0.35.5 # downloaded ‚úî üß† Sorting 2 packages operations... üß† Upgrade order: üç¨ [ 1 of 1] [U] system/luet-geaaru-testing::mottainai-dev - 0.35.5 [0.35.4::mottainai-stable] 8. Show luet configuration # The command config permits to see the configuration parameters active in luet.
# luet config --help Show luet configuration Usage: luet config [flags] Aliases: config, c Flags: -h, --help help for config 9. Queries tools # luet supplies different commands to analyze the repositories and the installed packages.
# luet query --help Repository query tools. Usage: luet query [command] Aliases: query, q Available Commands: belongs Resolve what package a file belongs to. files Show files owned by a specific package. orphans Show orphans packages. Flags: -h, --help help for query 9.1. Show files owned by a specific package # This command permits to show the files owned by a specific package.
$\u0026gt; luet q files --help Show files owned by a specific package. Usage: luet query files \u0026lt;pkg1\u0026gt; ... \u0026lt;pkgN\u0026gt; [OPTIONS] [flags] Aliases: files, fi, f Flags: -h, --help help for files --installed Search between system packages -o, --output string Output format ( Defaults: terminal, available: json,yaml ) (default \u0026#34;terminal\u0026#34;) --with-rootfs-prefix Add prefix of the configured rootfs path. (default true) It\u0026rsquo;s possible to see the list of files in JSON or YAML format:
$\u0026gt; luet q files lxd-compose -o json [\u0026#34;/usr/bin/lxd-compose\u0026#34;] 9.2. Resolve what package a file belongs to # This command permits to search the packages that contains the file specified.
$\u0026gt; luet q belongs --help Resolve what package a file belongs to. Usage: luet query belongs \u0026lt;file1\u0026gt; ... \u0026lt;fileN\u0026gt; [OPTIONS] [flags] Aliases: belongs, be, b Flags: -h, --help help for belongs --installed Search between system packages -o, --output string Output format ( Defaults: terminal, available: json,yaml ) (default \u0026#34;terminal\u0026#34;) --quiet show output as list without version --table show output in a table (wider screens) --quiet: show the list of the packages without the version
--output|-o string: show the package list in JSON, or YAML format. Default as string.
--installed: search only between the installed packages. It uses the local database.
$\u0026gt; luet q belongs /usr/bin/lxd-compose app-emulation/lxd-compose-0.27.0 $\u0026gt; luet q belongs /usr/bin/lxd-compose --quiet app-emulation/lxd-compose $\u0026gt; luet q belongs /usr/bin/lxd-compose --installed app-emulation/lxd-compose-0.27.0 9.3. Show orphans packages # On upgrading a system or on remove a custom repository it\u0026rsquo;s possible that some packages will be no more available.
In this use case having a way to retrieve the list of orphan packages is helpful.
This operation could require a lot of time.
NOTE: It\u0026rsquo;s important executing this command when there aren\u0026rsquo;t packages to upgrade. So, after executing luet upgrade.
$\u0026gt; luet q orphans --help An orphan package is a package that is no more available in the configured and/or enabled repositories. This operation could require a bit of time. Usage: luet query orphans [OPTIONS] [flags] Aliases: orphans, o Flags: -h, --help help for orphans -o, --output string Output format ( Defaults: terminal, available: json,yaml ) (default \u0026#34;terminal\u0026#34;) --quiet show output as list without version --verbose Show messages. (default true) 10. Local Database Operations # There are different commands to operate on local database.
10.1. Reindex collections # On upgrade luet it\u0026rsquo;s possible that is needed to update the indexes of the local database.
$\u0026gt; luet database reindex 10.2. Get package data # Retrive metadata of a package installed in the YAML format.
$\u0026gt; luet database get app-emulation/lxd-compose --help Get a package in the system database in the YAML format: $ luet database get system/foo To return also files: $ luet database get --files system/foo Usage: luet database get \u0026lt;package\u0026gt; [flags] Flags: --files Show package files. -h, --help help for get --files: Show also the package files. An example:
$\u0026gt; luet database get app-emulation/lxd-compose --files category: app-emulation conflicts: [] description: Supply a way to deploy a complex environment to an LXD Cluster or LXD standalone installation id: 467 labels: github.owner: lxd-compose github.repo: MottainaiCI license: GPL-3.0 name: lxd-compose repository: mottainai-stable requires: [] uri: - https://github.com/MottainaiCI/lxd-compose version: 0.27.0 files: - usr/bin/lxd-compose 10.3. Remove an installed package from the database # This command is a low-level operation that normally must be not used.
$\u0026gt; luet database remove --help Removes a package in the system database without actually uninstalling it: $ luet database remove foo/bar This commands takes multiple packages as arguments and prunes their entries from the system database. Usage: luet database remove [package1] [package2] ... [flags] Flags: --force Force uninstall -h, --help help for remove 10.4. Insert a package in the system database # It\u0026rsquo;s a low-level command that permit to register a new package in the system database.
This command is used by the luet-portage-converter tool to sync the package installed with emerge to luet database.
luet database create --help Inserts a package in the system database: $ luet database create foo.yaml \u0026#34;luet database create\u0026#34; injects a package in the system database without actually installing it, use it with caution. This commands takes multiple yaml input file representing package artifacts, that are usually generated while building packages. The yaml must contain the package definition, and the file list at least. For reference, inspect a \u0026#34;metadata.yaml\u0026#34; file generated while running \u0026#34;luet build\u0026#34; Usage: luet database create \u0026lt;artifact_metadata1.yaml\u0026gt; \u0026lt;artifact_metadata1.yaml\u0026gt; [flags] Flags: -h, --help help for create 11. Masking Packages # Leaving users the possibility to create their packages it\u0026rsquo;s needed to have a way to mask packages from the main repositories or others repositories. The masking could be used to stop the upgrade of a package too.
At the moment, there isn\u0026rsquo;t a CLI command that permit to mask packages.
The mask operation must be done manually creating file under one of the directories defined in the configuration option packages_maskdir that has the default /etc/luet/mask.d directory.
In particular, the content of the files YAML used to add mask rules are in the format:
description: | Packages mask for XXX # Enable packages mask (true) or not (false) enabled: true # The rules are in the Gentoo/Funtoo format rules: # Hidden the package test/b with version \u0026gt;=1.0 - \u0026gt;=test/b-1.0 # Hidden the package test/c with version 2.0 - =test/c-2.0 # Hidden the package test/e with version \u0026lt;3.0 - \u0026lt;test/e-3.0 # Hidden the package test/g with version 2.0 from repos main - test/g-2.0::main A real example could be the masking of the package that supplies the binary macaronictl. The package macaroni/ctl is a provides that is supplied by both packages app-admin/macaronictl and app-admin/macaronictl-thin.
A way to define what package the solver will be selected is to mask the package to exclude.
description: Select macaronictl-thin. enabled: true rules: - app-admin/macaronictl `}),e.add({id:13,href:"/docs/story/",title:"The Story",section:"Macaroni OS",content:`I write this article because I think that it\u0026rsquo;s needed to understand the story to improve things and instead follow the original choices when they make sense.
The Origins # After a lot of years working with opensource packages, I can for sure to said that there are so many possibilities to configure our systems that it isn\u0026rsquo;t sufficient one life to test all combinations.
But the power to choose is one of the more powerful things that the open-source world gift and the same packages often are created with the possibility to compile and build them in different ways. Also, the compiler used to compile and build a package supplies a lot of options to compile, optimize and validate the code (for example using -O2 or -O3 options) and this introduces again others combinations.
On August 21, 1994, Jordan Hubbard committed his port make macros to the FreeBSD CVS repository, and the FreeBSD ports is born. The FreeBSD ports through Makefile, supplies a way to define how it\u0026rsquo;s possible to compile a package and what are the knobs (or options) available to customize the compilation. So, the FreeBSD ports defines a way to supply metadata with the rules for compiling packages and optionally customize the configure options.
Following the concept to optimize the packages of a system based on specific hardware optimization in December 1999, Daniel Robbins initially created Gentoo Linux (previously called Enoch Linux). Daniel Robbins and the other contributors experimented with a fork of GCC known as EGCS, developed by Cygnus Solutions. At this point, \u0026ldquo;Enoch\u0026rdquo; was renamed \u0026ldquo;Gentoo\u0026rdquo; Linux (the Gentoo species is the fastest-swimming penguin). The modifications to EGCS eventually became part of the official GCC (version 2.95), and other Linux distributions experienced similar speed increases. After problems with a bug on his own system, Robbins halted Gentoo development and switched to FreeBSD for several months, later saying, \u0026ldquo;I decided to add several FreeBSD features to make our autobuild system (now called Portage) a true next-generation ports system\u0026rdquo;.
Gentoo Linux 1.0 was released on March 31, 2002. In 2004, Robbins set up the non-profit Gentoo Foundation, transferred all copyrights and trademarks to it, and stepped down as chief architect of the project.
Gentoo is a source-based distribution with a repository describing how to build the packages, and adding instructions to build on different machine architectures. In particular, the rules about how build a package are defined inside Ebuild files and on Eclasses files which are both files using Bash language. The Portage written in Python is the Package Manager System that calculates dependencies and the order to build using the underlying rules read from the Ebuild and Eclass files.
What are called knobs on FreeBSD in Gentoo are called USE flags.
Inside an ebuild there are some important pieces of information in addition to the rules about how to compile a package, pieces of information defined inside Bash variables:
IUSE: The list of the USE flags that an user could select or not to configure the build process.
DEPEND, PDEPEND, and BDEPEND: these variables contain the list of the packages needed to compile the package
RDEPEND: contains the list of the packages needed at runtime to use the package.
These pieces of information with others are what is called the metadata of the package and for an installed package are visible under the directory /var/db/pkg.
In Macaroni, like in both binary luet-portage-converter and luet we use code available in the pkgs-checker tool that I written in Golang that between the rest, it has a way to retrieve package metadata and convert them to JSON:
$\u0026gt; sudo pkgs-checker portage metadata app-emulation/lxd -j | jq [ { \u0026#34;package\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;lxd\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;app-emulation\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;5.12\u0026#34;, \u0026#34;slot\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;Condition\u0026#34;: 5, \u0026#34;repository\u0026#34;: \u0026#34;geaaru-kit\u0026#34;, \u0026#34;use_flags\u0026#34;: [ \u0026#34;-apparmor\u0026#34;, \u0026#34;ipv6\u0026#34;, \u0026#34;-nios2\u0026#34;, \u0026#34;nls\u0026#34;, \u0026#34;-sh\u0026#34; ], \u0026#34;license\u0026#34;: \u0026#34;Apache-2.0 BSD BSD-2 LGPL-3 MIT MPL-2.0\u0026#34; }, \u0026#34;iuse\u0026#34;: [ \u0026#34;apparmor\u0026#34;, \u0026#34;ipv6\u0026#34;, \u0026#34;nls\u0026#34;, \u0026#34;kernel_linux\u0026#34; ], \u0026#34;iuse_effective\u0026#34;: [ \u0026#34;alpha\u0026#34;, \u0026#34;amd64\u0026#34;, \u0026#34;amd64-fbsd\u0026#34;, \u0026#34;amd64-linux\u0026#34;, \u0026#34;apparmor\u0026#34;, \u0026#34;arm\u0026#34;, \u0026#34;arm-linux\u0026#34;, \u0026#34;arm64\u0026#34;, \u0026#34;elibc_AIX\u0026#34;, \u0026#34;elibc_Cygwin\u0026#34;, \u0026#34;elibc_Darwin\u0026#34;, \u0026#34;elibc_DragonFly\u0026#34;, \u0026#34;elibc_FreeBSD\u0026#34;, \u0026#34;elibc_HPUX\u0026#34;, \u0026#34;elibc_Interix\u0026#34;, \u0026#34;elibc_NetBSD\u0026#34;, \u0026#34;elibc_OpenBSD\u0026#34;, \u0026#34;elibc_SunOS\u0026#34;, \u0026#34;elibc_Winnt\u0026#34;, \u0026#34;elibc_bionic\u0026#34;, \u0026#34;elibc_glibc\u0026#34;, \u0026#34;elibc_mingw\u0026#34;, \u0026#34;elibc_mintlib\u0026#34;, \u0026#34;elibc_musl\u0026#34;, \u0026#34;elibc_uclibc\u0026#34;, \u0026#34;hppa\u0026#34;, \u0026#34;ia64\u0026#34;, \u0026#34;ipv6\u0026#34;, \u0026#34;kernel_AIX\u0026#34;, \u0026#34;kernel_Darwin\u0026#34;, \u0026#34;kernel_FreeBSD\u0026#34;, \u0026#34;kernel_HPUX\u0026#34;, \u0026#34;kernel_NetBSD\u0026#34;, \u0026#34;kernel_OpenBSD\u0026#34;, \u0026#34;kernel_SunOS\u0026#34;, \u0026#34;kernel_Winnt\u0026#34;, \u0026#34;kernel_freemint\u0026#34;, \u0026#34;kernel_linux\u0026#34;, \u0026#34;m68k\u0026#34;, \u0026#34;m68k-mint\u0026#34;, \u0026#34;mips\u0026#34;, \u0026#34;nios2\u0026#34;, \u0026#34;nls\u0026#34;, \u0026#34;ppc\u0026#34;, \u0026#34;ppc-aix\u0026#34;, \u0026#34;ppc-macos\u0026#34;, \u0026#34;ppc64\u0026#34;, \u0026#34;ppc64-linux\u0026#34;, \u0026#34;prefix\u0026#34;, \u0026#34;prefix-chain\u0026#34;, \u0026#34;prefix-guest\u0026#34;, \u0026#34;riscv\u0026#34;, \u0026#34;riscv32\u0026#34;, \u0026#34;riscv64\u0026#34;, \u0026#34;s390\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;sparc\u0026#34;, \u0026#34;sparc-fbsd\u0026#34;, \u0026#34;sparc-solaris\u0026#34;, \u0026#34;sparc64-solaris\u0026#34;, \u0026#34;userland_BSD\u0026#34;, \u0026#34;userland_GNU\u0026#34;, \u0026#34;x64-cygwin\u0026#34;, \u0026#34;x64-macos\u0026#34;, \u0026#34;x64-solaris\u0026#34;, \u0026#34;x86\u0026#34;, \u0026#34;x86-cygwin\u0026#34;, \u0026#34;x86-fbsd\u0026#34;, \u0026#34;x86-linux\u0026#34;, \u0026#34;x86-macos\u0026#34;, \u0026#34;x86-solaris\u0026#34;, \u0026#34;x86-winnt\u0026#34; ], \u0026#34;use\u0026#34;: [ \u0026#34;amd64\u0026#34;, \u0026#34;elibc_glibc\u0026#34;, \u0026#34;ipv6\u0026#34;, \u0026#34;kernel_linux\u0026#34;, \u0026#34;nls\u0026#34;, \u0026#34;userland_GNU\u0026#34; ], \u0026#34;eapi\u0026#34;: \u0026#34;7\u0026#34;, \u0026#34;cxxflags\u0026#34;: \u0026#34;-mtune=generic -O2 -pipe\u0026#34;, \u0026#34;cflags\u0026#34;: \u0026#34;-mtune=generic -O2 -pipe\u0026#34;, \u0026#34;ldflags\u0026#34;: \u0026#34;-Wl,-O1 -Wl,--sort-common -Wl,--as-needed\u0026#34;, \u0026#34;chost\u0026#34;: \u0026#34;x86_64-pc-linux-gnu\u0026#34;, \u0026#34;bdepend\u0026#34;: \u0026#34;\u0026gt;=dev-lang/go-1.18 \u0026gt;=sys-kernel/linux-headers-4.15 sys-devel/gettext \u0026gt;=app-portage/elt-patches-20170815 !\u0026lt;sys-devel/gettext-0.18.1.1-r3 || ( \u0026gt;=sys-devel/automake-1.16.1:1.16 \u0026gt;=sys-devel/automake-1.15.1:1.15 ) \u0026gt;=sys-devel/autoconf-2.69 \u0026gt;=sys-devel/libtool-2.4 \u0026gt;=dev-lang/go-1.10\u0026#34;, \u0026#34;rdepend\u0026#34;: \u0026#34;app-arch/xz-utils app-arch/lz4 \u0026gt;=app-emulation/lxc-4.0.6 dev-lang/tcl dev-libs/libuv dev-libs/lzo \u0026gt;=dev-util/xdelta-3.0 net-dns/dnsmasq[dhcp,ipv6] net-firewall/ebtables net-firewall/iptables[ipv6] sys-apps/iproute2[ipv6] sys-fs/fuse:* sys-fs/lxcfs sys-fs/squashfs-tools[lzma] virtual/acl\u0026#34;, \u0026#34;depend\u0026#34;: \u0026#34;app-arch/xz-utils app-arch/lz4 \u0026gt;=app-emulation/lxc-4.0.6 dev-lang/tcl dev-libs/libuv dev-libs/lzo \u0026gt;=dev-util/xdelta-3.0 net-dns/dnsmasq[dhcp,ipv6] sys-apps/shadow\u0026#34;, \u0026#34;requires\u0026#34;: \u0026#34;x86_64: libacl.so.1 libc.so.6 libcap.so.2 libdl.so.2 libgcc_s.so.1 liblxc.so.1 liblz4.so.1 libpthread.so.0 libsqlite3.so.0 libudev.so.1 libutil.so.1 libuv.so.1\u0026#34;, \u0026#34;keywords\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;provides\u0026#34;: \u0026#34;x86_64: libdqlite.so.0 libraft.so.3\u0026#34;, \u0026#34;size\u0026#34;: \u0026#34;232869057\u0026#34;, \u0026#34;build_time\u0026#34;: \u0026#34;1679645369\u0026#34;, \u0026#34;cbuild\u0026#34;: \u0026#34;x86_64-pc-linux-gnu\u0026#34;, ... The Portage together with the Ebuild is a very powerful tool to compile and customize packages and the OS.
I began to play with Gentoo around the year 2003 when I was a student at the Computer Science University and in one of my first job. Yet, I remember now how much time was needed to compile the kernel in a Pentium 233Mhz (if I remember correctly the model) and how much time I used to improve the old systems and yet, how much time to download tarball with a 56Kbit Analogic Line. Gentoo helped a lot with this.
Compile everything and every time could be more expensive as time and costs, it\u0026rsquo;s so in 2005 is created Sabayon Linux or Sabayon (formerly RR4 Linux and RR64 Linux), an Italian Gentoo-based Linux distribution created by Fabio Erculiani. Sabayon followed the \u0026ldquo;out of the box\u0026rdquo; philosophy, aiming to give the user a wide number of applications ready to use and a self-configured operating system.
The Sabayon\u0026rsquo;s Package Management System called Entropy, developed by Fabio Erculiani and others extends the Gentoo Portage. The Portage downloads source-code and compiles it specifically for the target system, Entropy manages binary files from servers; the binary tarball packages are precompiled using the Gentoo Linux tree using emerge (the Portage tool).
On the other side of the world, at the beginning of 2008, is created the Funtoo Linux Linux distribution based on Gentoo Linux. It was created by Daniel Robbins after that the Gentoo Foundation doesn\u0026rsquo;t want to follow the ideas proposed by Robbins.
Between battles with Solaris servers and Debian\u0026rsquo;s VMs on beginning working on supplying ready-to-use binary packages for my Clients, my colleague, and friend Walter Curtetti (aka kurtz81) shared with me a new Distribution that is based on Gentoo: Sabayon. So, in 2010, I started my interest on follow the Sabayon Team before as a Contributor and then as Developer in 2018.
In my years in Sabayon, I saw different things happen and I learn what are the areas that could be improved in a distribution and/or critical:
The Sabayon\u0026rsquo;s Packages Manager is written in Python and every time a new release of Python (for example from 3.6 to 3.7) was upgraded it was needed to support both releases for a bit of time and then to drop the previous to do an upgrade safe.
The big change in converting the /lib from a link to a directory it\u0026rsquo;s been a disaster, but it\u0026rsquo;s funny now to see the new SystemD release now prefers the old way with /lib and /usr/lib as links.
The pros to having Entropy as an extension of the Portage are fewer of the cons when Gentoo had to begin to do changes to the Portage that was not so easy to integrate with a code old to rewrite.
Supply a way for users to build additional packages through the SARK engine was really difficult because the Portage tree changes so fastly that was injected often dependencies that were for the sabayon core repository. We have tried with a Portage tree fixed to a specific Git Hash but also in this case sometimes wasn\u0026rsquo;t sufficient.
Entropy doesn\u0026rsquo;t handle correctly a reboot of a repository or only with forcing the sync of the repository.
With these words I don\u0026rsquo;t want to say that Entropy was bad, instead, it\u0026rsquo;s been a good product but without good maintenance of the code, it becomes slowly obsolete and too hard to fix.
After years, what is been an important element for the change is been following a path where the PMS was statically linked, without dependencies to other elements of the system that could be a problem in the upgrade phase. And so, in 2019/2020, this idea became real through a tool written in Golang: and it that born the luet project. With the release of the first versions, we have decided to a rebranding with the name Mocaccino OS.
The luet project was born to be a tool that is no more strictly connected to a specific compilation engine, thanks to the experience had with Entropy, but also free to use existing compilation systems without losing the prons. To reach this target it uses primarily Docker containers and this ensures reproducibility and isolation. Thanks to this independence, luet can be used to supply generic binary from every distributions.
The second big problem to resolve is been to have a more managed environment where builds and upgrades packages at the same time in a way independent but more controlled. It\u0026rsquo;s here that I began to work with integration between Mocaccino and Funtoo because it seems to me a better solution than Gentoo for our targets. I really appreciate the separation done by Funtoo in Kits and the use of branches to separate the big changes and personally, I think that these are been a very good choice by Daniel Robbins.
This integration starts my collaboration with Daniel Robbins and the announcement of the joining between Sabayon and Funtoo to work together.
Thanks to the support of Daniel Robbins, the reposcan tool was borns inside the metatools project to help in this integration. The reposcan tool generates the JSON files with the Portage metadata of every kit, these files are then used by the luet-portage-converter tool to generate the luet specs used for build packages.
The luet-portage-converter tool uses the reposcan files to calculate the build dependencies like the runtime dependencies based on the USE flags defined in its specs and then executes simplification stages to reduce the dependencies complexity. For example, if dependency A is an RDEPEND of the package B and C and package C has also a dependency to B, then we could avoid adding A as a dependency of C because is already injected by B.
Macaroni OS Era begins # In the middle of all this, at some point, my ideas about proceeding and changing luet, to continue the Funtoo integration, and with the Mocaccino Desktop release begins to be considered wrong and not accepted. In December 2021, I left the Sabayon/Mocaccino Team and create the Macaroni OS Project with the precious support of Daniel Robbins that help me bootstrap the domain macaroni.funtoo.org under the Funtoo umbrella.
In January 2023, I buy the domain macaronios.org and create the Github project macaroni-os so that the Macaroni OS became an independent project always strictly related to the Funtoo Community.
I want to thank every people that this long story is been part of it, in the bad and in the good, without you all of this will not be present. Good luck and good life to all of you.
And so, this is the begin\u0026hellip;
`})})()